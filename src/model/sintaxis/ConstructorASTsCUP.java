
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package model.sintaxis;

import exceptions.SintaxisException;
import model.sintaxis.SintaxisAbstracta.Prog;
import model.sintaxis.SintaxisAbstracta.Bloque;
import model.sintaxis.SintaxisAbstracta.Decs_opt;
import model.sintaxis.SintaxisAbstracta.Decs;
import model.sintaxis.SintaxisAbstracta.Dec;
import model.sintaxis.SintaxisAbstracta.Tipo;
import model.sintaxis.SintaxisAbstracta.Campos;
import model.sintaxis.SintaxisAbstracta.Campo;
import model.sintaxis.SintaxisAbstracta.LParam_opt;
import model.sintaxis.SintaxisAbstracta.LParam;
import model.sintaxis.SintaxisAbstracta.Param;
import model.sintaxis.SintaxisAbstracta.Instrs_opt;
import model.sintaxis.SintaxisAbstracta.Instrs;
import model.sintaxis.SintaxisAbstracta.Instr;
import model.sintaxis.SintaxisAbstracta.Exps_opt;
import model.sintaxis.SintaxisAbstracta.Exps;
import model.sintaxis.SintaxisAbstracta.Exp;
import model.lexico.AnalizadorLexico;
import model.lexico.UnidadLexica;
import model.lexico.UnidadLexica.StringLocalizado;
import java_cup.runtime.*;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ConstructorASTsCUP extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ClaseLexica.class;
}

  /** Default constructor. */
  @Deprecated
  public ConstructorASTsCUP() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ConstructorASTsCUP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTsCUP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\005\000\002\010\004\000\002" +
    "\012\006\000\002\012\003\000\002\013\003\000\002\013" +
    "\004\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\015\006\000\002\016\005\000\002\016\003\000\002" +
    "\017\004\000\002\011\010\000\002\020\003\000\002\020" +
    "\002\000\002\021\005\000\002\021\003\000\002\022\004" +
    "\000\002\022\005\000\002\023\003\000\002\023\002\000" +
    "\002\024\005\000\002\024\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\026\004\000" +
    "\002\027\005\000\002\027\007\000\002\030\005\000\002" +
    "\031\004\000\002\032\004\000\002\033\003\000\002\034" +
    "\004\000\002\035\004\000\002\036\007\000\002\037\003" +
    "\000\002\040\003\000\002\040\002\000\002\041\005\000" +
    "\002\041\003\000\002\042\005\000\002\042\003\000\002" +
    "\043\005\000\002\043\003\000\002\044\005\000\002\044" +
    "\005\000\002\044\003\000\002\045\005\000\002\045\005" +
    "\000\002\045\003\000\002\046\005\000\002\046\003\000" +
    "\002\047\004\000\002\047\003\000\002\050\006\000\002" +
    "\050\005\000\002\050\004\000\002\050\003\000\002\051" +
    "\005\000\002\051\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\055\003\000\002\055\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\004\032\006\001\002\000\004\002\231\001" +
    "\002\000\004\002\001\001\002\000\052\004\024\005\025" +
    "\006\013\007\015\032\ufffd\033\ufffd\040\ufffd\042\021\043" +
    "\ufffd\045\ufffd\046\011\047\ufffd\050\ufffd\051\ufffd\052\ufffd" +
    "\053\ufffd\054\014\055\ufffd\057\017\060\023\001\002\000" +
    "\006\027\ufff8\041\ufff8\001\002\000\006\027\ufff9\041\ufff9" +
    "\001\002\000\004\032\221\001\002\000\006\027\ufffb\041" +
    "\ufffb\001\002\000\010\034\uffef\056\uffef\060\uffef\001\002" +
    "\000\020\004\024\005\025\006\013\007\015\046\011\057" +
    "\017\060\023\001\002\000\010\034\uffee\056\uffee\060\uffee" +
    "\001\002\000\010\034\uffec\056\uffec\060\uffec\001\002\000" +
    "\020\004\024\005\025\006\013\007\015\046\011\057\017" +
    "\060\023\001\002\000\006\027\ufffa\041\ufffa\001\002\000" +
    "\004\060\201\001\002\000\030\032\006\033\uffdf\040\046" +
    "\043\055\045\050\047\064\050\065\051\044\052\056\053" +
    "\066\055\047\001\002\000\010\034\uffed\056\uffed\060\uffed" +
    "\001\002\000\010\034\ufff1\056\ufff1\060\ufff1\001\002\000" +
    "\010\034\ufff0\056\ufff0\060\ufff0\001\002\000\006\027\037" +
    "\041\036\001\002\000\010\034\ufff3\056\ufff3\060\ufff3\001" +
    "\002\000\010\034\ufff4\056\ufff4\060\ufff4\001\002\000\006" +
    "\034\032\060\033\001\002\000\004\061\034\001\002\000" +
    "\006\027\ufff6\041\ufff6\001\002\000\004\035\035\001\002" +
    "\000\010\034\ufff5\056\ufff5\060\ufff5\001\002\000\030\032" +
    "\ufffe\033\ufffe\040\ufffe\043\ufffe\045\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\055\ufffe\001\002\000\024\004" +
    "\024\005\025\006\013\007\015\042\021\046\011\054\014" +
    "\057\017\060\023\001\002\000\006\027\ufffc\041\ufffc\001" +
    "\002\000\006\027\uffd3\033\uffd3\001\002\000\006\027\uffd7" +
    "\033\uffd7\001\002\000\006\027\177\033\uffe0\001\002\000" +
    "\026\011\113\017\071\030\105\060\106\061\104\062\103" +
    "\063\112\064\070\065\110\066\111\001\002\000\006\027" +
    "\uffd4\033\uffd4\001\002\000\026\011\113\017\071\030\105" +
    "\060\106\061\104\062\103\063\112\064\070\065\110\066" +
    "\111\001\002\000\004\060\165\001\002\000\026\011\113" +
    "\017\071\030\105\060\106\061\104\062\103\063\112\064" +
    "\070\065\110\066\111\001\002\000\006\027\uffda\033\uffda" +
    "\001\002\000\006\027\uffdc\033\uffdc\001\002\000\006\027" +
    "\uffdd\033\uffdd\001\002\000\006\027\uffc8\033\uffc8\001\002" +
    "\000\026\011\113\017\071\030\105\060\106\061\104\062" +
    "\103\063\112\064\070\065\110\066\111\001\002\000\026" +
    "\011\113\017\071\030\105\060\106\061\104\062\103\063" +
    "\112\064\070\065\110\066\111\001\002\000\006\027\uffd8" +
    "\033\uffd8\001\002\000\006\027\uffd6\033\uffd6\001\002\000" +
    "\006\027\uffdb\033\uffdb\001\002\000\004\033\155\001\002" +
    "\000\006\027\uffd5\033\uffd5\001\002\000\026\011\113\017" +
    "\071\030\105\060\106\061\104\062\103\063\112\064\070" +
    "\065\110\066\111\001\002\000\026\011\113\017\071\030" +
    "\105\060\106\061\104\062\103\063\112\064\070\065\110" +
    "\066\111\001\002\000\006\027\uffcc\033\uffcc\001\002\000" +
    "\006\027\uffd9\033\uffd9\001\002\000\060\010\uffa1\011\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\057\uffa1\001\002\000\026\011\uffa5\017\uffa5\030\uffa5" +
    "\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066" +
    "\uffa5\001\002\000\060\010\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\057\uffb2\001" +
    "\002\000\060\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\150\035\uffb6\036\uffb6\037\146\057\147\001\002\000" +
    "\052\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\016\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\031\uffb8\032\uffb8\033\uffb8\035\uffb8" +
    "\036\uffb8\001\002\000\060\010\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\057\uffb0" +
    "\001\002\000\052\010\uffba\011\uffba\012\141\013\140\014" +
    "\137\015\136\016\142\020\uffba\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\025\uffba\026\uffba\027\uffba\031\uffba\032\uffba\033" +
    "\uffba\035\uffba\036\uffba\001\002\000\040\010\uffbd\011\133" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\031\uffbd\032\uffbd\033\uffbd\035\uffbd\036\uffbd" +
    "\001\002\000\036\010\130\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\035\uffc0\036\uffc0\001\002\000\034\020\123\021" +
    "\124\022\125\023\126\024\121\025\122\026\117\027\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\035\uffc2\036\uffc2\001\002\000" +
    "\006\027\uffca\033\uffca\001\002\000\060\010\uffa4\011\uffa4" +
    "\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\020\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\057\uffa4\001\002\000\060\010\uffa3\011\uffa3\012\uffa3" +
    "\013\uffa3\014\uffa3\015\uffa3\016\uffa3\020\uffa3\021\uffa3\022" +
    "\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\031\uffa3" +
    "\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\057" +
    "\uffa3\001\002\000\026\011\113\017\071\030\105\060\106" +
    "\061\104\062\103\063\112\064\070\065\110\066\111\001" +
    "\002\000\060\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f" +
    "\015\uff9f\016\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024" +
    "\uff9f\025\uff9f\026\uff9f\027\uff9f\031\uff9f\032\uff9f\033\uff9f" +
    "\034\uff9f\035\uff9f\036\uff9f\037\uff9f\057\uff9f\001\002\000" +
    "\026\011\113\017\071\030\105\060\106\061\104\062\103" +
    "\063\112\064\070\065\110\066\111\001\002\000\060\010" +
    "\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0" +
    "\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026" +
    "\uffa0\027\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\057\uffa0\001\002\000\060\010\uff9e\011" +
    "\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\020\uff9e" +
    "\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e" +
    "\037\uff9e\057\uff9e\001\002\000\060\010\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\020\uffa2\021\uffa2" +
    "\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\031" +
    "\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2" +
    "\057\uffa2\001\002\000\026\011\uffa6\017\uffa6\030\uffa6\060" +
    "\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6" +
    "\001\002\000\052\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\016\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\035\uffb7\036\uffb7\001\002\000\004\031\116\001\002" +
    "\000\060\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\025\uffb1\026\uffb1\027\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\057\uffb1\001\002\000\026" +
    "\011\113\017\071\030\105\060\106\061\104\062\103\063" +
    "\112\064\070\065\110\066\111\001\002\000\026\011\113" +
    "\017\071\030\105\060\106\061\104\062\103\063\112\064" +
    "\070\065\110\066\111\001\002\000\026\011\uffab\017\uffab" +
    "\030\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065" +
    "\uffab\066\uffab\001\002\000\026\011\uffaa\017\uffaa\030\uffaa" +
    "\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066" +
    "\uffaa\001\002\000\026\011\uffae\017\uffae\030\uffae\060\uffae" +
    "\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\001" +
    "\002\000\026\011\uffaf\017\uffaf\030\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\001\002\000" +
    "\026\011\uffac\017\uffac\030\uffac\060\uffac\061\uffac\062\uffac" +
    "\063\uffac\064\uffac\065\uffac\066\uffac\001\002\000\026\011" +
    "\uffad\017\uffad\030\uffad\060\uffad\061\uffad\062\uffad\063\uffad" +
    "\064\uffad\065\uffad\066\uffad\001\002\000\036\010\130\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\031\uffc1\032\uffc1\033\uffc1\035\uffc1\036\uffc1\001" +
    "\002\000\026\011\113\017\071\030\105\060\106\061\104" +
    "\062\103\063\112\064\070\065\110\066\111\001\002\000" +
    "\036\010\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf\035" +
    "\uffbf\036\uffbf\001\002\000\016\027\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\035\uffc3\036\uffc3\001\002\000\026\011\113\017" +
    "\071\030\105\060\106\061\104\062\103\063\112\064\070" +
    "\065\110\066\111\001\002\000\036\010\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\035\uffbe\036\uffbe\001\002\000" +
    "\026\011\113\017\071\030\105\060\106\061\104\062\103" +
    "\063\112\064\070\065\110\066\111\001\002\000\026\011" +
    "\113\017\071\030\105\060\106\061\104\062\103\063\112" +
    "\064\070\065\110\066\111\001\002\000\026\011\uffa7\017" +
    "\uffa7\030\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\066\uffa7\001\002\000\026\011\uffa8\017\uffa8\030" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8" +
    "\066\uffa8\001\002\000\026\011\uffa9\017\uffa9\030\uffa9\060" +
    "\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9" +
    "\001\002\000\026\011\113\017\071\030\105\060\106\061" +
    "\104\062\103\063\112\064\070\065\110\066\111\001\002" +
    "\000\046\010\uffbb\011\uffbb\012\141\013\140\014\137\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\031\uffbb\032\uffbb\033\uffbb\035\uffbb\036\uffbb\001" +
    "\002\000\040\010\uffbc\011\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\035\uffbc\036\uffbc\001\002\000\052\010\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\020" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\031\uffb9\032\uffb9\033\uffb9\035\uffb9\036\uffb9\001" +
    "\002\000\004\060\153\001\002\000\060\010\uffb3\011\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037" +
    "\uffb3\057\uffb3\001\002\000\026\011\113\017\071\030\105" +
    "\060\106\061\104\062\103\063\112\064\070\065\110\066" +
    "\111\001\002\000\004\035\152\001\002\000\060\010\uffb5" +
    "\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\057\uffb5\001\002\000\060\010\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\057\uffb4\001\002\000\006\027\uffcb\033\uffcb\001\002" +
    "\000\014\002\uffff\027\uffff\033\uffff\041\uffff\044\uffff\001" +
    "\002\000\006\027\uffcd\033\uffcd\001\002\000\004\032\006" +
    "\001\002\000\010\027\uffd1\033\uffd1\044\161\001\002\000" +
    "\004\032\006\001\002\000\006\027\uffd0\033\uffd0\001\002" +
    "\000\004\032\006\001\002\000\006\027\uffcf\033\uffcf\001" +
    "\002\000\004\030\166\001\002\000\030\011\113\017\071" +
    "\030\105\031\uffc6\060\106\061\104\062\103\063\112\064" +
    "\070\065\110\066\111\001\002\000\006\031\uffc7\036\173" +
    "\001\002\000\006\031\uffc4\036\uffc4\001\002\000\004\031" +
    "\172\001\002\000\006\027\uffc9\033\uffc9\001\002\000\026" +
    "\011\113\017\071\030\105\060\106\061\104\062\103\063" +
    "\112\064\070\065\110\066\111\001\002\000\006\031\uffc5" +
    "\036\uffc5\001\002\000\006\027\uffd2\033\uffd2\001\002\000" +
    "\006\027\uffce\033\uffce\001\002\000\026\032\006\040\046" +
    "\043\055\045\050\047\064\050\065\051\044\052\056\053" +
    "\066\055\047\001\002\000\006\027\uffde\033\uffde\001\002" +
    "\000\004\030\202\001\002\000\022\004\024\005\025\006" +
    "\013\007\015\031\uffe5\046\011\057\017\060\023\001\002" +
    "\000\010\034\032\056\213\060\214\001\002\000\006\031" +
    "\uffe3\036\uffe3\001\002\000\004\031\211\001\002\000\006" +
    "\031\uffe6\036\207\001\002\000\020\004\024\005\025\006" +
    "\013\007\015\046\011\057\017\060\023\001\002\000\006" +
    "\031\uffe4\036\uffe4\001\002\000\004\032\006\001\002\000" +
    "\006\027\uffe7\041\uffe7\001\002\000\004\060\215\001\002" +
    "\000\006\031\uffe2\036\uffe2\001\002\000\006\031\uffe1\036" +
    "\uffe1\001\002\000\010\034\ufff2\056\ufff2\060\ufff2\001\002" +
    "\000\006\034\032\060\220\001\002\000\006\027\ufff7\041" +
    "\ufff7\001\002\000\020\004\024\005\025\006\013\007\015" +
    "\046\011\057\017\060\023\001\002\000\006\034\032\060" +
    "\230\001\002\000\006\033\226\036\225\001\002\000\006" +
    "\033\uffe9\036\uffe9\001\002\000\020\004\024\005\025\006" +
    "\013\007\015\046\011\057\017\060\023\001\002\000\010" +
    "\034\uffeb\056\uffeb\060\uffeb\001\002\000\006\033\uffea\036" +
    "\uffea\001\002\000\006\033\uffe8\036\uffe8\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\021\005\025\006\011" +
    "\007\017\010\007\011\006\012\030\013\027\014\026\015" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\216\013\027\014\026\015\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\215\014\026\015\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\053" +
    "\023\061\024\042\025\052\026\051\027\060\030\050\031" +
    "\066\032\056\033\041\034\057\035\062\036\044\037\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\037\007\017\010\007\011\006\012\030\013\027\014" +
    "\026\015\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\042\175\043" +
    "\100\044\077\045\076\046\075\047\073\050\072\051\071" +
    "\052\074\055\106\001\001\000\002\001\001\000\026\042" +
    "\174\043\100\044\077\045\076\046\075\047\073\050\072" +
    "\051\071\052\074\055\106\001\001\000\002\001\001\000" +
    "\026\042\162\043\100\044\077\045\076\046\075\047\073" +
    "\050\072\051\071\052\074\055\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\042\156\043\100\044\077\045\076\046\075\047" +
    "\073\050\072\051\071\052\074\055\106\001\001\000\026" +
    "\042\155\043\100\044\077\045\076\046\075\047\073\050" +
    "\072\051\071\052\074\055\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\042\153\043\100\044\077\045\076" +
    "\046\075\047\073\050\072\051\071\052\074\055\106\001" +
    "\001\000\026\042\101\043\100\044\077\045\076\046\075" +
    "\047\073\050\072\051\071\052\074\055\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\042\114\043\100\044\077\045\076\046\075\047\073\050" +
    "\072\051\071\052\074\055\106\001\001\000\002\001\001" +
    "\000\014\047\113\050\072\051\071\052\074\055\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\042\131\043\100\044\077\045\076" +
    "\046\075\047\073\050\072\051\071\052\074\055\106\001" +
    "\001\000\022\044\126\045\076\046\075\047\073\050\072" +
    "\051\071\052\074\055\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\045" +
    "\130\046\075\047\073\050\072\051\071\052\074\055\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\045" +
    "\133\046\075\047\073\050\072\051\071\052\074\055\106" +
    "\001\001\000\002\001\001\000\014\047\144\050\072\051" +
    "\071\052\074\055\106\001\001\000\020\045\143\046\075" +
    "\047\073\050\072\051\071\052\074\055\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\046\142\047\073\050\072\051\071\052\074\055\106\001" +
    "\001\000\004\054\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\042" +
    "\150\043\100\044\077\045\076\046\075\047\073\050\072" +
    "\051\071\052\074\055\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\157\001\001\000" +
    "\002\001\001\000\004\003\161\001\001\000\002\001\001" +
    "\000\004\003\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\040\170\041\166\042\167\043\100\044\077" +
    "\045\076\046\075\047\073\050\072\051\071\052\074\055" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\042\173\043\100\044" +
    "\077\045\076\046\075\047\073\050\072\051\071\052\074" +
    "\055\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\053\025\177\026\051\027\060" +
    "\030\050\031\066\032\056\033\041\034\057\035\062\036" +
    "\044\037\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\202\013\027\014\026\015\015\020\204\021" +
    "\205\022\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\202\013" +
    "\027\014\026\015\015\022\207\001\001\000\002\001\001" +
    "\000\004\003\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\012\221\013" +
    "\027\014\026\015\015\016\222\017\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\221\013\027\014\026\015\015\017\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

   AnalizadorLexico alex = (AnalizadorLexico)getScanner();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

  return getScanner().next_token();

    }


   public void syntax_error(Symbol unidadLexica) {
     throw new SintaxisException((UnidadLexica)unidadLexica);
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ConstructorASTs$actions {


  ClaseSemantica sem = new ClaseSemantica();

  private final ConstructorASTsCUP parser;

  /** Constructor */
  CUP$ConstructorASTs$actions(ConstructorASTsCUP parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTs$do_action_part00000000(
    int                        CUP$ConstructorASTs$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTs$parser,
    java.util.Stack            CUP$ConstructorASTs$stack,
    int                        CUP$ConstructorASTs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTs$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Prog RESULT =null;
		int bqleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Bloque bq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.prog(bq); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTs$parser.done_parsing();
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAVE_APERTURA declaraciones_opt instrucciones_opt LLAVE_CIERRE 
            {
              Bloque RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		Decs_opt decs = (Decs_opt)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		Instrs_opt instrs = (Instrs_opt)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		 RESULT = sem.bloque(decs, instrs); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("bloque",1, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones_opt ::= declaraciones CAMBIO_SEC 
            {
              Decs_opt RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		 RESULT = sem.si_decs(decs); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",2, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones_opt ::= 
            {
              Decs_opt RESULT =null;
		 RESULT = sem.no_decs(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",2, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= declaraciones PYC declaracion 
            {
              Decs RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.l_decs(decs, dec); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= declaracion 
            {
              Decs RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.una_dec(dec); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= dec_tipo 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = dec; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= dec_variable 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = dec; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= dec_procedimiento 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = dec; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_tipo ::= TYPE tipo0 IDENTIFICADOR 
            {
              Dec RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Dec)sem.t_dec(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("dec_tipo",5, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_variable ::= tipo0 IDENTIFICADOR 
            {
              Dec RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Dec)sem.v_dec(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("dec_variable",6, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo0 ::= tipo0 COR_APERTURA LITERAL_ENTERO COR_CIERRE 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)).value;
		int capleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int capright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		StringLocalizado cap = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		 RESULT = (Tipo)sem.a_tipo(tipo, cap.str()).ponFila(cap.fila()).ponCol(cap.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("tipo0",8, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo0 ::= tipo1 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = tipo; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("tipo0",8, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo1 ::= tipo2 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = tipo; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("tipo1",9, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo1 ::= PUNTERO tipo1 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.p_tipo(tipo); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("tipo1",9, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo2 ::= ENTERO 
            {
              Tipo RESULT =null;
		 RESULT = sem.in_tipo(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo2 ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.r_tipo(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo2 ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = sem.b_tipo(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo2 ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.string_tipo(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo2 ::= IDENTIFICADOR 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Tipo)sem.id_tipo(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo2 ::= registro 
            {
              Tipo RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Tipo reg = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = reg; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // registro ::= STRUCT LLAVE_APERTURA campos LLAVE_CIERRE 
            {
              Tipo RESULT =null;
		int campsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int campsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		Campos camps = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		 RESULT = sem.struct_tipo(camps); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("registro",11, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // campos ::= campos COMA campo 
            {
              Campos RESULT =null;
		int campsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int campsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		Campos camps = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int camleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int camright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Campo cam = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.l_campos(camps, cam); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("campos",12, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // campos ::= campo 
            {
              Campos RESULT =null;
		int camleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int camright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Campo cam = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.un_campo(cam); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("campos",12, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // campo ::= tipo0 IDENTIFICADOR 
            {
              Campo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Campo)sem.camp(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("campo",13, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dec_procedimiento ::= PROC IDENTIFICADOR PAP lista_parametros_opt PCIERRE bloque 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-4)).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		LParam_opt params = (LParam_opt)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int bqleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Bloque bq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Dec)sem.p_dec(id.str(), params, bq).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("dec_procedimiento",7, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-5)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_parametros_opt ::= lista_parametros 
            {
              LParam_opt RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		LParam params = (LParam)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.si_param(params); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_parametros_opt",14, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_parametros_opt ::= 
            {
              LParam_opt RESULT =null;
		 RESULT = sem.no_param(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_parametros_opt",14, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_parametros ::= lista_parametros COMA parametro 
            {
              LParam RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		LParam params = (LParam)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.l_param(params, param); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_parametros",15, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_parametros ::= parametro 
            {
              LParam RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.un_param(param); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_parametros",15, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametro ::= tipo0 IDENTIFICADOR 
            {
              Param RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Param)sem.param_simple(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("parametro",16, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametro ::= tipo0 REFERENCIA IDENTIFICADOR 
            {
              Param RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Param)sem.param_ref(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("parametro",16, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instrucciones_opt ::= instrucciones 
            {
              Instrs_opt RESULT =null;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Instrs instrs = (Instrs)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.si_instrs(instrs); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instrucciones_opt",17, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrucciones_opt ::= 
            {
              Instrs_opt RESULT =null;
		 RESULT = sem.no_instrs(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instrucciones_opt",17, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrucciones ::= instrucciones PYC instruccion 
            {
              Instrs RESULT =null;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		Instrs instrs = (Instrs)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.l_instrs(instrs, instr); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instrucciones",18, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instrucciones ::= instruccion 
            {
              Instrs RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.una_instr(instr); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instrucciones",18, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= instruccion_eval 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= instruccion_if 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= instruccion_while 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= instruccion_read 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= instruccion_write 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= instruccion_nl 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= instruccion_new 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= instruccion_delete 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= instruccion_call 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= instruccion_compuesta 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion_eval ::= EVALUA E0 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.eva(exp); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion_eval",20, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion_if ::= IF E0 bloque 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		int bqleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Bloque bq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.if_instr(exp, bq); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion_if",21, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccion_if ::= IF E0 bloque ELSE bloque 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)).value;
		int bq1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int bq1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		Bloque bq1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int bq2left = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int bq2right = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Bloque bq2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.if_el(exp, bq1, bq2); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion_if",21, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-4)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccion_while ::= WHILE E0 bloque 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		int bqleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Bloque bq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.wh(exp, bq); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion_while",22, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccion_read ::= READ E0 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.rd(exp); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion_read",23, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruccion_write ::= WRITE E0 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.wr(exp); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion_write",24, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruccion_nl ::= NL 
            {
              Instr RESULT =null;
		 RESULT = sem.nl(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion_nl",25, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruccion_new ::= NEW E0 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.nw(exp); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion_new",26, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruccion_delete ::= DELETE E0 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.dl(exp); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion_delete",27, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instruccion_call ::= CALL IDENTIFICADOR PAP lista_expresiones_opt PCIERRE 
            {
              Instr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		Exps_opt exps = (Exps_opt)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		 RESULT = (Instr)sem.cl(id.str(), exps).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion_call",28, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-4)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instruccion_compuesta ::= bloque 
            {
              Instr RESULT =null;
		int bqleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Bloque bq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.bq_instr(bq); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("instruccion_compuesta",29, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_expresiones_opt ::= lista_expresiones 
            {
              Exps_opt RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exps exps = (Exps)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.si_exps(exps); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_expresiones_opt",30, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_expresiones_opt ::= 
            {
              Exps_opt RESULT =null;
		 RESULT = sem.no_exps(); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_expresiones_opt",30, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_expresiones ::= lista_expresiones COMA E0 
            {
              Exps RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		Exps exps = (Exps)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.l_exps(exps, exp); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_expresiones",31, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_expresiones ::= E0 
            {
              Exps RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.una_exp(exp); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("lista_expresiones",31, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E0 ::= E1 ASIGNACION E0 
            {
              Exp RESULT =null;
		int opnd0left = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int opnd0right = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.mkop("=", opnd0, opnd1); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E0",32, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E0 ::= E1 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E0",32, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E1 ::= E1 OP1 E2 
            {
              Exp RESULT =null;
		int opnd0left = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int opnd0right = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.mkop(op, opnd0, opnd1); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E1",33, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E1 ::= E2 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E1",33, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E2 ::= E2 SUMA E3 
            {
              Exp RESULT =null;
		int opnd0left = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int opnd0right = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.mkop("+", opnd0, opnd1); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E2",34, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E2 ::= E3 RESTA E3 
            {
              Exp RESULT =null;
		int opnd0left = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int opnd0right = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.mkop("-", opnd0, opnd1); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E2",34, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E2 ::= E3 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E2",34, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E3 ::= E4 AND E3 
            {
              Exp RESULT =null;
		int opnd0left = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int opnd0right = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.mkop("and", opnd0, opnd1); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E3",35, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E3 ::= E4 OR E4 
            {
              Exp RESULT =null;
		int opnd0left = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int opnd0right = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.mkop("or", opnd0, opnd1); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E3",35, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E3 ::= E4 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E3",35, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E4 ::= E4 OP4 E5 
            {
              Exp RESULT =null;
		int opnd0left = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int opnd0right = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.mkop(op, opnd0, opnd1); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E4",36, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E4 ::= E5 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E4",36, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E5 ::= OP5 E5 
            {
              Exp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		int opndleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int opndright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp opnd = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = sem.mkop_pre(op, opnd); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E5",37, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E5 ::= E6 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E5",37, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E6 ::= E6 COR_APERTURA E0 COR_CIERRE 
            {
              Exp RESULT =null;
		int opndleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)).left;
		int opndright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)).right;
		Exp opnd = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		Exp pos = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		 RESULT = sem.indexacion(opnd, pos); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E6",38, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E6 ::= E6 ACCESO IDENTIFICADOR 
            {
              Exp RESULT =null;
		int opndleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).left;
		int opndright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).right;
		Exp opnd = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)).value;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		StringLocalizado acceso = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp)sem.acceso(opnd, acceso.str()).ponFila(acceso.fila()).ponCol(acceso.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E6",38, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E6 ::= E6 PUNTERO 
            {
              Exp RESULT =null;
		int opndleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int opndright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		Exp opnd = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		 RESULT = sem.indireccion(opnd); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E6",38, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E6 ::= E7 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E6",38, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E7 ::= PAP E0 PCIERRE 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-1)).value;
		 RESULT = exp; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E7",39, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.elementAt(CUP$ConstructorASTs$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E7 ::= operando 
            {
              Exp RESULT =null;
		int opndleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int opndright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		Exp opnd = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = opnd; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("E7",39, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP1 ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP1 ::= MENOR 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP1 ::= MAYOR_IGUAL 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP1 ::= MENOR_IGUAL 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP1 ::= IGUAL 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP1 ::= DIFERENTE 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP4 ::= POR 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP4",42, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP4 ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP4",42, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP4 ::= MODULO 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP4",42, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP5 ::= RESTA 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP5",43, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP5 ::= NOT 
            {
              String RESULT =null;
		 RESULT = "not"; 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("OP5",43, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operando ::= LITERAL_REAL 
            {
              Exp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		StringLocalizado re = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp)sem.real(re.str()).ponFila(re.fila()).ponCol(re.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("operando",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operando ::= LITERAL_ENTERO 
            {
              Exp RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		StringLocalizado ent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp)sem.real(ent.str()).ponFila(ent.fila()).ponCol(ent.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("operando",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operando ::= LITERAL_TRUE 
            {
              Exp RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		StringLocalizado tr = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp)sem.true_exp().ponFila(tr.fila()).ponCol(tr.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("operando",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operando ::= LITERAL_FALSE 
            {
              Exp RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		StringLocalizado fl = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp)sem.false_exp().ponFila(fl.fila()).ponCol(fl.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("operando",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operando ::= LITERAL_STRING 
            {
              Exp RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		StringLocalizado st = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp)sem.string(st.str()).ponFila(st.fila()).ponCol(st.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("operando",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operando ::= IDENTIFICADOR 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp)sem.iden(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("operando",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operando ::= NULL 
            {
              Exp RESULT =null;
		int nulleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).left;
		int nulright = ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()).right;
		StringLocalizado nul = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTs$stack.peek()).value;
		 RESULT = (Exp)sem.nulo().ponFila(nul.fila()).ponCol(nul.col()); 
              CUP$ConstructorASTs$result = parser.getSymbolFactory().newSymbol("operando",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTs$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTs$do_action(
    int                        CUP$ConstructorASTs$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTs$parser,
    java.util.Stack            CUP$ConstructorASTs$stack,
    int                        CUP$ConstructorASTs$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTs$do_action_part00000000(
                               CUP$ConstructorASTs$act_num,
                               CUP$ConstructorASTs$parser,
                               CUP$ConstructorASTs$stack,
                               CUP$ConstructorASTs$top);
    }
}

}
