
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package model.sintaxis;

import exceptions.SintaxisException;
import model.sintaxis.SintaxisAbstracta.Prog;
import model.sintaxis.SintaxisAbstracta.Bloque;
import model.sintaxis.SintaxisAbstracta.Decs_opt;
import model.sintaxis.SintaxisAbstracta.Decs;
import model.sintaxis.SintaxisAbstracta.Dec;
import model.sintaxis.SintaxisAbstracta.Tipo;
import model.sintaxis.SintaxisAbstracta.Campos;
import model.sintaxis.SintaxisAbstracta.Campo;
import model.sintaxis.SintaxisAbstracta.LParam_opt;
import model.sintaxis.SintaxisAbstracta.LParam;
import model.sintaxis.SintaxisAbstracta.Param;
import model.sintaxis.SintaxisAbstracta.Instrs_opt;
import model.sintaxis.SintaxisAbstracta.Instrs;
import model.sintaxis.SintaxisAbstracta.Instr;
import model.sintaxis.SintaxisAbstracta.Exps_opt;
import model.sintaxis.SintaxisAbstracta.Exps;
import model.sintaxis.SintaxisAbstracta.Exp;
import model.lexico.AnalizadorLexico;
import model.lexico.UnidadLexica;
import model.lexico.UnidadLexica.StringLocalizado;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ConstructorASTsCUP extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ClaseLexica.class;
}

  /** Default constructor. */
  @Deprecated
  public ConstructorASTsCUP() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ConstructorASTsCUP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTsCUP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\005\000\002\010\004\000\002" +
    "\012\006\000\002\012\003\000\002\013\003\000\002\013" +
    "\004\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\015\006\000\002\016\005\000\002\016\003\000\002" +
    "\017\004\000\002\011\010\000\002\020\003\000\002\020" +
    "\002\000\002\021\005\000\002\021\003\000\002\022\004" +
    "\000\002\022\005\000\002\023\003\000\002\023\002\000" +
    "\002\024\005\000\002\024\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\026\004\000" +
    "\002\027\005\000\002\027\007\000\002\030\005\000\002" +
    "\031\004\000\002\032\004\000\002\033\003\000\002\034" +
    "\004\000\002\035\004\000\002\036\007\000\002\037\003" +
    "\000\002\040\003\000\002\040\002\000\002\041\005\000" +
    "\002\041\003\000\002\042\005\000\002\042\003\000\002" +
    "\043\005\000\002\043\003\000\002\044\005\000\002\044" +
    "\005\000\002\044\003\000\002\045\005\000\002\045\005" +
    "\000\002\045\003\000\002\046\005\000\002\046\003\000" +
    "\002\047\004\000\002\047\003\000\002\050\006\000\002" +
    "\050\005\000\002\050\004\000\002\050\003\000\002\051" +
    "\005\000\002\051\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\055\003\000\002\055\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\004\013\006\001\002\000\004\002\231\001" +
    "\002\000\004\002\001\001\002\000\052\004\024\005\025" +
    "\006\013\007\015\013\ufffd\014\ufffd\020\ufffd\022\021\023" +
    "\ufffd\025\ufffd\026\011\027\ufffd\030\ufffd\031\ufffd\032\ufffd" +
    "\033\ufffd\034\014\035\ufffd\037\023\047\017\001\002\000" +
    "\006\010\ufff8\021\ufff8\001\002\000\006\010\ufff9\021\ufff9" +
    "\001\002\000\004\013\221\001\002\000\006\010\ufffb\021" +
    "\ufffb\001\002\000\010\036\uffef\037\uffef\046\uffef\001\002" +
    "\000\020\004\024\005\025\006\013\007\015\026\011\037" +
    "\023\047\017\001\002\000\010\036\uffee\037\uffee\046\uffee" +
    "\001\002\000\010\036\uffec\037\uffec\046\uffec\001\002\000" +
    "\020\004\024\005\025\006\013\007\015\026\011\037\023" +
    "\047\017\001\002\000\006\010\ufffa\021\ufffa\001\002\000" +
    "\004\037\201\001\002\000\030\013\006\014\uffdf\020\046" +
    "\023\055\025\050\027\064\030\065\031\044\032\056\033" +
    "\066\035\047\001\002\000\010\036\uffed\037\uffed\046\uffed" +
    "\001\002\000\010\036\ufff1\037\ufff1\046\ufff1\001\002\000" +
    "\010\036\ufff0\037\ufff0\046\ufff0\001\002\000\006\010\037" +
    "\021\036\001\002\000\010\036\ufff3\037\ufff3\046\ufff3\001" +
    "\002\000\010\036\ufff4\037\ufff4\046\ufff4\001\002\000\006" +
    "\037\033\046\032\001\002\000\004\040\034\001\002\000" +
    "\006\010\ufff6\021\ufff6\001\002\000\004\015\035\001\002" +
    "\000\010\036\ufff5\037\ufff5\046\ufff5\001\002\000\030\013" +
    "\ufffe\014\ufffe\020\ufffe\023\ufffe\025\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\032\ufffe\033\ufffe\035\ufffe\001\002\000\024\004" +
    "\024\005\025\006\013\007\015\022\021\026\011\034\014" +
    "\037\023\047\017\001\002\000\006\010\ufffc\021\ufffc\001" +
    "\002\000\006\010\uffd3\014\uffd3\001\002\000\006\010\uffd7" +
    "\014\uffd7\001\002\000\006\010\177\014\uffe0\001\002\000" +
    "\026\011\105\037\106\040\104\041\103\042\112\043\070" +
    "\044\110\045\111\051\113\057\071\001\002\000\006\010" +
    "\uffd4\014\uffd4\001\002\000\026\011\105\037\106\040\104" +
    "\041\103\042\112\043\070\044\110\045\111\051\113\057" +
    "\071\001\002\000\004\037\165\001\002\000\026\011\105" +
    "\037\106\040\104\041\103\042\112\043\070\044\110\045" +
    "\111\051\113\057\071\001\002\000\006\010\uffda\014\uffda" +
    "\001\002\000\006\010\uffdc\014\uffdc\001\002\000\006\010" +
    "\uffdd\014\uffdd\001\002\000\006\010\uffc8\014\uffc8\001\002" +
    "\000\026\011\105\037\106\040\104\041\103\042\112\043" +
    "\070\044\110\045\111\051\113\057\071\001\002\000\026" +
    "\011\105\037\106\040\104\041\103\042\112\043\070\044" +
    "\110\045\111\051\113\057\071\001\002\000\006\010\uffd8" +
    "\014\uffd8\001\002\000\006\010\uffd6\014\uffd6\001\002\000" +
    "\006\010\uffdb\014\uffdb\001\002\000\004\014\155\001\002" +
    "\000\006\010\uffd5\014\uffd5\001\002\000\026\011\105\037" +
    "\106\040\104\041\103\042\112\043\070\044\110\045\111" +
    "\051\113\057\071\001\002\000\026\011\105\037\106\040" +
    "\104\041\103\042\112\043\070\044\110\045\111\051\113" +
    "\057\071\001\002\000\006\010\uffcc\014\uffcc\001\002\000" +
    "\006\010\uffd9\014\uffd9\001\002\000\060\010\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\046\uffa1\047" +
    "\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\066\uffa1\001\002\000\026\011\uffa5\037\uffa5\040\uffa5" +
    "\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\051\uffa5\057" +
    "\uffa5\001\002\000\060\010\uffb2\012\uffb2\013\uffb2\014\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\046\uffb2\047\uffb2\050\uffb2\051" +
    "\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\001" +
    "\002\000\060\010\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\017\146\046\150\047\147\050\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\060\uffb6\061\uffb6" +
    "\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\001\002\000" +
    "\052\010\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\001\002\000\060\010\uffb0\012\uffb0\013\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\046\uffb0\047\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\060" +
    "\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0" +
    "\001\002\000\052\010\uffba\012\uffba\013\uffba\014\uffba\015" +
    "\uffba\016\uffba\050\uffba\051\uffba\052\141\053\140\054\137" +
    "\055\136\056\142\060\uffba\061\uffba\062\uffba\063\uffba\064" +
    "\uffba\065\uffba\066\uffba\001\002\000\040\010\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\016\uffbd\050\uffbd\051\133\060" +
    "\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd" +
    "\001\002\000\036\010\uffc0\012\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\050\130\060\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\065\uffc0\066\uffc0\001\002\000\034\010\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\060\123\061\124" +
    "\062\125\063\126\064\121\065\122\066\117\001\002\000" +
    "\006\010\uffca\014\uffca\001\002\000\060\010\uffa4\012\uffa4" +
    "\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\046\uffa4\047" +
    "\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4" +
    "\056\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065" +
    "\uffa4\066\uffa4\001\002\000\060\010\uffa3\012\uffa3\013\uffa3" +
    "\014\uffa3\015\uffa3\016\uffa3\017\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3" +
    "\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066" +
    "\uffa3\001\002\000\026\011\105\037\106\040\104\041\103" +
    "\042\112\043\070\044\110\045\111\051\113\057\071\001" +
    "\002\000\060\010\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052" +
    "\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\001\002\000" +
    "\026\011\105\037\106\040\104\041\103\042\112\043\070" +
    "\044\110\045\111\051\113\057\071\001\002\000\060\010" +
    "\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\056\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0" +
    "\064\uffa0\065\uffa0\066\uffa0\001\002\000\060\010\uff9e\012" +
    "\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055" +
    "\uff9e\056\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e" +
    "\065\uff9e\066\uff9e\001\002\000\060\010\uffa2\012\uffa2\013" +
    "\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\046\uffa2\047\uffa2" +
    "\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056" +
    "\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2" +
    "\066\uffa2\001\002\000\026\011\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\051\uffa6\057\uffa6" +
    "\001\002\000\052\010\uffb7\012\uffb7\013\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064" +
    "\uffb7\065\uffb7\066\uffb7\001\002\000\004\012\116\001\002" +
    "\000\060\010\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\056\uffb1\060\uffb1\061\uffb1\062" +
    "\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\001\002\000\026" +
    "\011\105\037\106\040\104\041\103\042\112\043\070\044" +
    "\110\045\111\051\113\057\071\001\002\000\026\011\105" +
    "\037\106\040\104\041\103\042\112\043\070\044\110\045" +
    "\111\051\113\057\071\001\002\000\026\011\uffab\037\uffab" +
    "\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\051" +
    "\uffab\057\uffab\001\002\000\026\011\uffaa\037\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\051\uffaa\057" +
    "\uffaa\001\002\000\026\011\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\045\uffae\051\uffae\057\uffae\001" +
    "\002\000\026\011\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\051\uffaf\057\uffaf\001\002\000" +
    "\026\011\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac" +
    "\044\uffac\045\uffac\051\uffac\057\uffac\001\002\000\026\011" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\051\uffad\057\uffad\001\002\000\036\010\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\050\130\060\uffc1" +
    "\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\001" +
    "\002\000\026\011\105\037\106\040\104\041\103\042\112" +
    "\043\070\044\110\045\111\051\113\057\071\001\002\000" +
    "\036\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\050\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065" +
    "\uffbf\066\uffbf\001\002\000\016\010\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\016\uffc3\001\002\000\026\011\105\037" +
    "\106\040\104\041\103\042\112\043\070\044\110\045\111" +
    "\051\113\057\071\001\002\000\036\010\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\050\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\001\002\000" +
    "\026\011\105\037\106\040\104\041\103\042\112\043\070" +
    "\044\110\045\111\051\113\057\071\001\002\000\026\011" +
    "\105\037\106\040\104\041\103\042\112\043\070\044\110" +
    "\045\111\051\113\057\071\001\002\000\026\011\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\051\uffa7\057\uffa7\001\002\000\026\011\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\051\uffa8" +
    "\057\uffa8\001\002\000\026\011\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\051\uffa9\057\uffa9" +
    "\001\002\000\026\011\105\037\106\040\104\041\103\042" +
    "\112\043\070\044\110\045\111\051\113\057\071\001\002" +
    "\000\046\010\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\050\uffbb\051\uffbb\052\141\053\140\054\137\060\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\001" +
    "\002\000\040\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\050\uffbc\051\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\001\002\000\052\010\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\060\uffb9" +
    "\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\001" +
    "\002\000\004\037\153\001\002\000\060\010\uffb3\012\uffb3" +
    "\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065" +
    "\uffb3\066\uffb3\001\002\000\026\011\105\037\106\040\104" +
    "\041\103\042\112\043\070\044\110\045\111\051\113\057" +
    "\071\001\002\000\004\015\152\001\002\000\060\010\uffb5" +
    "\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064" +
    "\uffb5\065\uffb5\066\uffb5\001\002\000\060\010\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\001\002\000\006\010\uffcb\014\uffcb\001\002" +
    "\000\014\002\uffff\010\uffff\014\uffff\021\uffff\024\uffff\001" +
    "\002\000\006\010\uffcd\014\uffcd\001\002\000\004\013\006" +
    "\001\002\000\010\010\uffd1\014\uffd1\024\161\001\002\000" +
    "\004\013\006\001\002\000\006\010\uffd0\014\uffd0\001\002" +
    "\000\004\013\006\001\002\000\006\010\uffcf\014\uffcf\001" +
    "\002\000\004\011\166\001\002\000\030\011\105\012\uffc6" +
    "\037\106\040\104\041\103\042\112\043\070\044\110\045" +
    "\111\051\113\057\071\001\002\000\006\012\uffc7\016\173" +
    "\001\002\000\006\012\uffc4\016\uffc4\001\002\000\004\012" +
    "\172\001\002\000\006\010\uffc9\014\uffc9\001\002\000\026" +
    "\011\105\037\106\040\104\041\103\042\112\043\070\044" +
    "\110\045\111\051\113\057\071\001\002\000\006\012\uffc5" +
    "\016\uffc5\001\002\000\006\010\uffd2\014\uffd2\001\002\000" +
    "\006\010\uffce\014\uffce\001\002\000\026\013\006\020\046" +
    "\023\055\025\050\027\064\030\065\031\044\032\056\033" +
    "\066\035\047\001\002\000\006\010\uffde\014\uffde\001\002" +
    "\000\004\011\202\001\002\000\022\004\024\005\025\006" +
    "\013\007\015\012\uffe5\026\011\037\023\047\017\001\002" +
    "\000\010\036\213\037\214\046\032\001\002\000\006\012" +
    "\uffe3\016\uffe3\001\002\000\004\012\211\001\002\000\006" +
    "\012\uffe6\016\207\001\002\000\020\004\024\005\025\006" +
    "\013\007\015\026\011\037\023\047\017\001\002\000\006" +
    "\012\uffe4\016\uffe4\001\002\000\004\013\006\001\002\000" +
    "\006\010\uffe7\021\uffe7\001\002\000\004\037\215\001\002" +
    "\000\006\012\uffe2\016\uffe2\001\002\000\006\012\uffe1\016" +
    "\uffe1\001\002\000\010\036\ufff2\037\ufff2\046\ufff2\001\002" +
    "\000\006\037\220\046\032\001\002\000\006\010\ufff7\021" +
    "\ufff7\001\002\000\020\004\024\005\025\006\013\007\015" +
    "\026\011\037\023\047\017\001\002\000\006\037\230\046" +
    "\032\001\002\000\006\014\226\016\225\001\002\000\006" +
    "\014\uffe9\016\uffe9\001\002\000\020\004\024\005\025\006" +
    "\013\007\015\026\011\037\023\047\017\001\002\000\010" +
    "\036\uffeb\037\uffeb\046\uffeb\001\002\000\006\014\uffea\016" +
    "\uffea\001\002\000\006\014\uffe8\016\uffe8\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\021\005\025\006\011" +
    "\007\017\010\007\011\006\012\030\013\027\014\026\015" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\216\013\027\014\026\015\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\215\014\026\015\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\053" +
    "\023\061\024\042\025\052\026\051\027\060\030\050\031" +
    "\066\032\056\033\041\034\057\035\062\036\044\037\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\006\037\007\017\010\007\011\006\012\030\013\027\014" +
    "\026\015\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\042\175\043" +
    "\100\044\077\045\076\046\075\047\073\050\072\051\071" +
    "\052\074\055\106\001\001\000\002\001\001\000\026\042" +
    "\174\043\100\044\077\045\076\046\075\047\073\050\072" +
    "\051\071\052\074\055\106\001\001\000\002\001\001\000" +
    "\026\042\162\043\100\044\077\045\076\046\075\047\073" +
    "\050\072\051\071\052\074\055\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\042\156\043\100\044\077\045\076\046\075\047" +
    "\073\050\072\051\071\052\074\055\106\001\001\000\026" +
    "\042\155\043\100\044\077\045\076\046\075\047\073\050" +
    "\072\051\071\052\074\055\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\042\153\043\100\044\077\045\076" +
    "\046\075\047\073\050\072\051\071\052\074\055\106\001" +
    "\001\000\026\042\101\043\100\044\077\045\076\046\075" +
    "\047\073\050\072\051\071\052\074\055\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\042\114\043\100\044\077\045\076\046\075\047\073\050" +
    "\072\051\071\052\074\055\106\001\001\000\002\001\001" +
    "\000\014\047\113\050\072\051\071\052\074\055\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\042\131\043\100\044\077\045\076" +
    "\046\075\047\073\050\072\051\071\052\074\055\106\001" +
    "\001\000\022\044\126\045\076\046\075\047\073\050\072" +
    "\051\071\052\074\055\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\045" +
    "\130\046\075\047\073\050\072\051\071\052\074\055\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\045" +
    "\133\046\075\047\073\050\072\051\071\052\074\055\106" +
    "\001\001\000\002\001\001\000\014\047\144\050\072\051" +
    "\071\052\074\055\106\001\001\000\020\045\143\046\075" +
    "\047\073\050\072\051\071\052\074\055\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\046\142\047\073\050\072\051\071\052\074\055\106\001" +
    "\001\000\004\054\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\042" +
    "\150\043\100\044\077\045\076\046\075\047\073\050\072" +
    "\051\071\052\074\055\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\157\001\001\000" +
    "\002\001\001\000\004\003\161\001\001\000\002\001\001" +
    "\000\004\003\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\040\170\041\166\042\167\043\100\044\077" +
    "\045\076\046\075\047\073\050\072\051\071\052\074\055" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\042\173\043\100\044" +
    "\077\045\076\046\075\047\073\050\072\051\071\052\074" +
    "\055\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\053\025\177\026\051\027\060" +
    "\030\050\031\066\032\056\033\041\034\057\035\062\036" +
    "\044\037\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\202\013\027\014\026\015\015\020\204\021" +
    "\205\022\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\202\013" +
    "\027\014\026\015\015\022\207\001\001\000\002\001\001" +
    "\000\004\003\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\012\221\013" +
    "\027\014\026\015\015\016\222\017\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\221\013\027\014\026\015\015\017\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTsCUP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTsCUP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTsCUP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

   AnalizadorLexico alex = (AnalizadorLexico)getScanner();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

  return getScanner().next_token();

    }


  @Override
  public void debug_message(String msg) {}
  @Override
  public void debug_shift(Symbol token) {}
  @Override
  public void syntax_error(Symbol unidadLexica) {
    throw new SintaxisException((UnidadLexica)unidadLexica);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ConstructorASTsCUP$actions {


  ClaseSemantica sem = new ClaseSemantica();

  private final ConstructorASTsCUP parser;

  /** Constructor */
  CUP$ConstructorASTsCUP$actions(ConstructorASTsCUP parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTsCUP$do_action_part00000000(
    int                        CUP$ConstructorASTsCUP$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTsCUP$parser,
    java.util.Stack            CUP$ConstructorASTsCUP$stack,
    int                        CUP$ConstructorASTsCUP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTsCUP$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTsCUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Prog RESULT =null;
		int bqleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Bloque bq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.prog(bq); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTsCUP$parser.done_parsing();
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAVE_APERTURA declaraciones_opt instrucciones_opt LLAVE_CIERRE 
            {
              Bloque RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		Decs_opt decs = (Decs_opt)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		Instrs_opt instrs = (Instrs_opt)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		 RESULT = sem.bloque(decs, instrs); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("bloque",1, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones_opt ::= declaraciones CAMBIO_SEC 
            {
              Decs_opt RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		 RESULT = sem.si_decs(decs); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",2, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones_opt ::= 
            {
              Decs_opt RESULT =null;
		 RESULT = sem.no_decs(); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",2, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= declaraciones PYC declaracion 
            {
              Decs RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.l_decs(decs, dec); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= declaracion 
            {
              Decs RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.una_dec(dec); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= dec_tipo 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = dec; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= dec_variable 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = dec; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= dec_procedimiento 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = dec; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_tipo ::= TYPE tipo0 IDENTIFICADOR 
            {
              Dec RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Dec)sem.t_dec(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("dec_tipo",5, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_variable ::= tipo0 IDENTIFICADOR 
            {
              Dec RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Dec)sem.v_dec(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("dec_variable",6, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo0 ::= tipo0 COR_APERTURA LITERAL_ENTERO COR_CIERRE 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-3)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-3)).value;
		int capleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int capright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		StringLocalizado cap = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		 RESULT = (Tipo)sem.a_tipo(tipo, cap.str()).ponFila(cap.fila()).ponCol(cap.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("tipo0",8, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo0 ::= tipo1 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = tipo; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("tipo0",8, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo1 ::= tipo2 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = tipo; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("tipo1",9, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo1 ::= PUNTERO tipo1 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.p_tipo(tipo); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("tipo1",9, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo2 ::= ENTERO 
            {
              Tipo RESULT =null;
		 RESULT = sem.in_tipo(); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo2 ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.r_tipo(); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo2 ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = sem.b_tipo(); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo2 ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.string_tipo(); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo2 ::= IDENTIFICADOR 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Tipo)sem.id_tipo(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo2 ::= registro 
            {
              Tipo RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int regright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Tipo reg = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = reg; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // registro ::= STRUCT LLAVE_APERTURA campos LLAVE_CIERRE 
            {
              Tipo RESULT =null;
		int campsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int campsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		Campos camps = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		 RESULT = sem.struct_tipo(camps); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("registro",11, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // campos ::= campos COMA campo 
            {
              Campos RESULT =null;
		int campsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int campsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		Campos camps = (Campos)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int camleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int camright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Campo cam = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.l_campos(camps, cam); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("campos",12, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // campos ::= campo 
            {
              Campos RESULT =null;
		int camleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int camright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Campo cam = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.un_campo(cam); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("campos",12, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // campo ::= tipo0 IDENTIFICADOR 
            {
              Campo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Campo)sem.camp(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("campo",13, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dec_procedimiento ::= PROC IDENTIFICADOR PAP lista_parametros_opt PCIERRE bloque 
            {
              Dec RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-4)).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		LParam_opt params = (LParam_opt)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int bqleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Bloque bq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Dec)sem.p_dec(id.str(), params, bq).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("dec_procedimiento",7, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-5)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_parametros_opt ::= lista_parametros 
            {
              LParam_opt RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		LParam params = (LParam)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.si_param(params); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("lista_parametros_opt",14, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_parametros_opt ::= 
            {
              LParam_opt RESULT =null;
		 RESULT = sem.no_param(); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("lista_parametros_opt",14, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_parametros ::= lista_parametros COMA parametro 
            {
              LParam RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		LParam params = (LParam)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.l_param(params, param); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("lista_parametros",15, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_parametros ::= parametro 
            {
              LParam RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.un_param(param); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("lista_parametros",15, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametro ::= tipo0 IDENTIFICADOR 
            {
              Param RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Param)sem.param_simple(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("parametro",16, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametro ::= tipo0 REFERENCIA IDENTIFICADOR 
            {
              Param RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Param)sem.param_ref(tipo, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("parametro",16, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instrucciones_opt ::= instrucciones 
            {
              Instrs_opt RESULT =null;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Instrs instrs = (Instrs)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.si_instrs(instrs); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instrucciones_opt",17, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrucciones_opt ::= 
            {
              Instrs_opt RESULT =null;
		 RESULT = sem.no_instrs(); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instrucciones_opt",17, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrucciones ::= instrucciones PYC instruccion 
            {
              Instrs RESULT =null;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		Instrs instrs = (Instrs)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.l_instrs(instrs, instr); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instrucciones",18, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instrucciones ::= instruccion 
            {
              Instrs RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.una_instr(instr); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instrucciones",18, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= instruccion_eval 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= instruccion_if 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= instruccion_while 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= instruccion_read 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= instruccion_write 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= instruccion_nl 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= instruccion_new 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= instruccion_delete 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= instruccion_call 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= instruccion_compuesta 
            {
              Instr RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Instr instr = (Instr)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = instr; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion_eval ::= EVALUA E0 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.eva(exp); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion_eval",20, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion_if ::= IF E0 bloque 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		int bqleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Bloque bq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.if_instr(exp, bq); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion_if",21, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccion_if ::= IF E0 bloque ELSE bloque 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-3)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-3)).value;
		int bq1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int bq1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		Bloque bq1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int bq2left = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int bq2right = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Bloque bq2 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.if_el(exp, bq1, bq2); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion_if",21, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-4)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccion_while ::= WHILE E0 bloque 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		int bqleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Bloque bq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.wh(exp, bq); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion_while",22, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccion_read ::= READ E0 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.rd(exp); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion_read",23, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruccion_write ::= WRITE E0 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.wr(exp); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion_write",24, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruccion_nl ::= NL 
            {
              Instr RESULT =null;
		 RESULT = sem.nl(); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion_nl",25, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruccion_new ::= NEW E0 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.nw(exp); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion_new",26, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruccion_delete ::= DELETE E0 
            {
              Instr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.dl(exp); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion_delete",27, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instruccion_call ::= CALL IDENTIFICADOR PAP lista_expresiones_opt PCIERRE 
            {
              Instr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-3)).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-3)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		Exps_opt exps = (Exps_opt)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		 RESULT = (Instr)sem.cl(id.str(), exps).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion_call",28, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-4)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instruccion_compuesta ::= bloque 
            {
              Instr RESULT =null;
		int bqleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int bqright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Bloque bq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.bq_instr(bq); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("instruccion_compuesta",29, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_expresiones_opt ::= lista_expresiones 
            {
              Exps_opt RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exps exps = (Exps)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.si_exps(exps); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("lista_expresiones_opt",30, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_expresiones_opt ::= 
            {
              Exps_opt RESULT =null;
		 RESULT = sem.no_exps(); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("lista_expresiones_opt",30, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_expresiones ::= lista_expresiones COMA E0 
            {
              Exps RESULT =null;
		int expsleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		Exps exps = (Exps)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.l_exps(exps, exp); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("lista_expresiones",31, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_expresiones ::= E0 
            {
              Exps RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = sem.una_exp(exp); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("lista_expresiones",31, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E0 ::= E1 ASIGNACION E0 
            {
              Exp RESULT =null;
		int opnd0left = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int opnd0right = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.mkop("=", opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E0",32, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E0 ::= E1 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E0",32, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E1 ::= E1 OP1 E2 
            {
              Exp RESULT =null;
		int opnd0left = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int opnd0right = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E1",33, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E1 ::= E2 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E1",33, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E2 ::= E2 SUMA E3 
            {
              Exp RESULT =null;
		int opnd0left = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int opnd0right = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.mkop("+", opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E2",34, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E2 ::= E3 RESTA E3 
            {
              Exp RESULT =null;
		int opnd0left = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int opnd0right = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.mkop("-", opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E2",34, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E2 ::= E3 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E2",34, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E3 ::= E4 AND E3 
            {
              Exp RESULT =null;
		int opnd0left = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int opnd0right = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.mkop("and", opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E3",35, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E3 ::= E4 OR E4 
            {
              Exp RESULT =null;
		int opnd0left = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int opnd0right = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.mkop("or", opnd0, opnd1).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E3",35, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E3 ::= E4 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E3",35, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E4 ::= E4 OP4 E5 
            {
              Exp RESULT =null;
		int opnd0left = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int opnd0right = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		Exp opnd0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		int opnd1left = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opnd1right = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.mkop(op.str(), opnd0, opnd1).ponFila(op.fila()).ponCol(op.col());;
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E4",36, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E4 ::= E5 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E4",36, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E5 ::= OP5 E5 
            {
              Exp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		int opndleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opndright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp opnd = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.mkop_pre(op.str(), opnd).ponFila(op.fila()).ponCol(op.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E5",37, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E5 ::= E6 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E5",37, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E6 ::= E6 COR_APERTURA E0 COR_CIERRE 
            {
              Exp RESULT =null;
		int opndleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-3)).left;
		int opndright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-3)).right;
		Exp opnd = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-3)).value;
		int cApleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int cApright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		StringLocalizado cAp = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int posleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		Exp pos = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		 RESULT = (Exp)sem.indexacion(opnd, pos).ponFila(cAp.fila()).ponCol(cAp.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E6",38, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E6 ::= E6 ACCESO IDENTIFICADOR 
            {
              Exp RESULT =null;
		int opndleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).left;
		int opndright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).right;
		Exp opnd = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)).value;
		int accesoleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int accesoright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado acceso = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.acceso(opnd, acceso.str()).ponFila(acceso.fila()).ponCol(acceso.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E6",38, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E6 ::= E6 PUNTERO 
            {
              Exp RESULT =null;
		int opndleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int opndright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		Exp opnd = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		int puntleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int puntright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado punt = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.indireccion(opnd).ponFila(punt.fila()).ponCol(punt.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E6",38, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E6 ::= E7 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E6",38, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E7 ::= PAP E0 PCIERRE 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-1)).value;
		 RESULT = exp; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E7",39, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.elementAt(CUP$ConstructorASTsCUP$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E7 ::= operando 
            {
              Exp RESULT =null;
		int opndleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opndright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		Exp opnd = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = opnd; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("E7",39, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP1 ::= MAYOR 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP1 ::= MENOR 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP1 ::= MAYOR_IGUAL 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP1 ::= MENOR_IGUAL 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP1 ::= IGUAL 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP1 ::= DIFERENTE 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP4 ::= POR 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("OP4",42, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP4 ::= DIV 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("OP4",42, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP4 ::= MODULO 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("OP4",42, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP5 ::= RESTA 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = op; 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("OP5",43, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP5 ::= NOT 
            {
              StringLocalizado RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = new StringLocalizado("not", op.fila(), op.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("OP5",43, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operando ::= LITERAL_REAL 
            {
              Exp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado re = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.real(re.str()).ponFila(re.fila()).ponCol(re.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("operando",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operando ::= LITERAL_ENTERO 
            {
              Exp RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado ent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.entero(ent.str()).ponFila(ent.fila()).ponCol(ent.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("operando",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operando ::= LITERAL_TRUE 
            {
              Exp RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado tr = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.true_exp().ponFila(tr.fila()).ponCol(tr.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("operando",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operando ::= LITERAL_FALSE 
            {
              Exp RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado fl = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.false_exp().ponFila(fl.fila()).ponCol(fl.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("operando",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operando ::= LITERAL_STRING 
            {
              Exp RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado st = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.string(st.str()).ponFila(st.fila()).ponCol(st.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("operando",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operando ::= IDENTIFICADOR 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.iden(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("operando",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operando ::= NULL 
            {
              Exp RESULT =null;
		int nulleft = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).left;
		int nulright = ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()).right;
		StringLocalizado nul = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsCUP$stack.peek()).value;
		 RESULT = (Exp)sem.nulo().ponFila(nul.fila()).ponCol(nul.col()); 
              CUP$ConstructorASTsCUP$result = parser.getSymbolFactory().newSymbol("operando",40, ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsCUP$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsCUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTsCUP$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTsCUP$do_action(
    int                        CUP$ConstructorASTsCUP$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTsCUP$parser,
    java.util.Stack            CUP$ConstructorASTsCUP$stack,
    int                        CUP$ConstructorASTsCUP$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTsCUP$do_action_part00000000(
                               CUP$ConstructorASTsCUP$act_num,
                               CUP$ConstructorASTsCUP$parser,
                               CUP$ConstructorASTsCUP$stack,
                               CUP$ConstructorASTsCUP$top);
    }
}

}
