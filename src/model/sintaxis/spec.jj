options {
	STATIC=false;
	DEBUG_PARSER=true;
}

PARSER_BEGIN(AsinCC)
package model.sintaxis;

public class AsinCC {
  protected void newToken(Token t) {}
}
PARSER_END(AsinCC)
	TOKEN:{<#Letra:["a"-"z","A"-"Z", "_"]>}
	TOKEN:{<#DigitoPositivo:["1"-"9"]>}
	TOKEN:{<#Digito:<DigitoPositivo>|"0">}
	TOKEN:{<#ParteEntera:<DigitoPositivo> (<Digito>)* |"0">}
	TOKEN:{<#ParteDecimal: <Acceso>((<Digito>)*<DigitoPositivo>|"0")>}
	TOKEN:{<#ParteExponencial:("e"|"E") (["+", "-"])? <ParteEntera>>}
	TOKEN:{<#ComboPartes:<ParteDecimal><ParteExponencial>>}

	TOKEN:{<Entero:("i"|"I")("n"|"N")("t"|"T")>}
	TOKEN:{<Real:("r"|"R")("e"|"E")("a"|"A")("l"|"L")>}
	TOKEN:{<Boolean:("b"|"B")("o"|"O")("o"|"O")("l"|"L")>}
	TOKEN:{<String:("s"|"S")("t"|"T")("r"|"R")("i"|"I")("n"|"N")("g"|"G")>}
	TOKEN:{<LiteralTrue:("t"|"T")("r"|"R")("u"|"U")("e"|"E")>}
	TOKEN:{<LiteralFalse:("f"|"F")("a"|"A")("l"|"L")("s"|"S")("e"|"E")>}
	TOKEN:{<And:("a"|"A")("n"|"N")("d"|"D")>}
	TOKEN:{<Or:("o"|"O")("r"|"R")>}
	TOKEN:{<Not:("n"|"N")("o"|"O")("t"|"T")>}
	TOKEN:{<Null:("n"|"N")("u"|"U")("l"|"L")("l"|"L")>}
	TOKEN:{<Proc:("p"|"P")("r"|"R")("o"|"O")("c"|"C")>}
	TOKEN:{<If:("i"|"I")("f"|"F")>}
	TOKEN:{<Else:("e"|"E")("l"|"L")("s"|"S")("e"|"E")>}
	TOKEN:{<While:("w"|"W")("h"|"H")("i"|"I")("l"|"L")("e"|"E")>}
	TOKEN:{<Struct:("s"|"S")("t"|"T")("r"|"R")("u"|"U")("c"|"C")("t"|"T")>}
	TOKEN:{<New:("n"|"N")("e"|"E")("w"|"W")>}
	TOKEN:{<Delete:("d"|"D")("e"|"E")("l"|"L")("e"|"E")("t"|"T")("e"|"E")>}
	TOKEN:{<Read:("r"|"R")("e"|"E")("a"|"A")("d"|"D")>}
	TOKEN:{<Write:("w"|"W")("r"|"R")("i"|"I")("t"|"T")("e"|"E")>}
	TOKEN:{<Nl:("n"|"N")("l"|"L")>}
	TOKEN:{<Type:("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>}
	TOKEN:{<Call:("c"|"C")("a"|"A")("l"|"L")("l"|"L")>}
	TOKEN:{<Identificador: <Letra> (<Letra> | <Digito>)*>}

	TOKEN:{<LiteralEntero: (["+", "-"])? <ParteEntera>>}
	TOKEN:{<LiteralReal: <LiteralEntero> (<ParteDecimal> | <ParteExponencial> | <ComboPartes> )>}
	TOKEN:{<LiteralString: "\"" (~["\""])* "\"">}

	TOKEN:{<Suma:"+">}
	TOKEN:{<Resta:"-">}
	TOKEN:{<Mul:"*">}
	TOKEN:{<Div:"/">}
	TOKEN:{<Modulo:"%">}
	TOKEN:{<Puntero: "^">}
	TOKEN:{<Referencia: "&">}
	TOKEN:{<MenorQue:"<">}
	TOKEN:{<MayorQue:">">}
	TOKEN:{<MenorOIgualQue:"<=">}
	TOKEN:{<MayorOIgualQue:">=">}
	TOKEN:{<Igual:"==">}
	TOKEN:{<Diferente:"!=">}
	TOKEN:{<Asignacion:"=">}
	TOKEN:{<PyC:";">}
	TOKEN:{<ParAp:"(">}
	TOKEN:{<ParCierre:")">}
	TOKEN:{<CorcheteApertura:"[">}
	TOKEN:{<CorcheteCierro:"]">}
	TOKEN:{<LlaveApertura:"{">}
	TOKEN:{<LlaveCierre:"}">}
	TOKEN:{<Acceso:".">}
	TOKEN:{<Coma:",">}
	TOKEN:{<FinDeclaracion:"&&">}
	TOKEN:{<Evalua:"@">}

	SKIP:{<["\t"," ","\r","\b","\n"]>}
	SKIP:{<"##"((~["\n"]))*>}

void analiza() : {} {programa() <EOF>}
void programa(): {} { bloque() }
void bloque(): {} { "{" declaraciones_opt() instrucciones_opt() "}" }
void declaraciones_opt(): {} { declaraciones() <FinDeclaracion> | {} }
void declaraciones(): {} { declaración() r_declaraciones() }
void r_declaraciones(): {} { ";" declaración() r_declaraciones() | {} }
void declaración(): {} { dec_variable() | dec_tipo() | dec_procedimiento() }
void dec_tipo(): {} { <Type> tipo0() <Identificador> }
void dec_variable(): {} { tipo0() <Identificador> }
void tipo0(): {} { tipo1() r_tipo0()}
void r_tipo0(): {} { ("["<LiteralEntero>"]") r_tipo0() | {} }
void tipo1(): {} { <Puntero> tipo1() | tipo2() }
void tipo2(): {} { <Entero> | <Real> | <Boolean> | <String> | <Identificador> | registro() }
void registro(): {} { <Struct> "{" campos() "}" }
void campos(): {} { campo() r_campos() }
void r_campos(): {} { "," campo() r_campos() | {} }
void campo(): {} { dec_variable() }

void dec_procedimiento(): {} { <Proc> <Identificador> parametros_formales() bloque() }
void parametros_formales(): {} { "(" lista_parametros_opt() ")" }
void lista_parametros_opt(): {} { lista_parametros() | {} }
void lista_parametros(): {} { parametro() r_lista_parametros() }
void r_lista_parametros(): {} { "," parametro() r_lista_parametros() | {} }
void parametro(): {} { tipo0() r_parametro() }
void r_parametro(): {} { <Identificador> | "&" <Identificador> }
void instrucciones_opt(): {} { instrucciones() | {} }
void instrucciones(): {} { instruccion() r_instrucciones() }
void r_instrucciones(): {} { ";" instruccion() r_instrucciones() | {} }
void instruccion(): {} { instruccion_eval() | instruccion_if() | instruccion_while() | instruccion_read() | instruccion_write() | instruccion_nl() | instruccion_new() | instruccion_delete() | instruccion_call() | instruccion_compuesta() }
void instruccion_eval(): {} { "@" E0() }
void instruccion_if(): {} { <If> E0() bloque() r_instruccion_if() }
void r_instruccion_if(): {} { <Else> bloque() | {} }
void instruccion_while(): {} { <While> E0() bloque() }
void instruccion_read(): {} { <Read> E0() }
void instruccion_write(): {} { <Write> E0() }
void instruccion_nl(): {} { <Nl> }
void instruccion_new(): {} { <New> E0() }
void instruccion_delete(): {} { <Delete> E0() }
void instruccion_call(): {} { <Call> <Identificador> "(" lista_expresiones_opt() ")" }
void instruccion_compuesta(): {} { bloque() }
void lista_expresiones_opt(): {} { lista_expresiones() | {} }
void lista_expresiones(): {} { E0() r_lista_expresiones() }
void r_lista_expresiones(): {} { "," E0() r_lista_expresiones() | {}}

void E0(): {} { E1() RE0() }
void RE0(): {} { "=" E0() | {} }
void E1(): {} { E2() RE1() }
void RE1(): {} { OP1() E2() RE1() | {} }
void E2(): {} { E3() R2E2() R1E2() }
void R1E2(): {} { "+" E3() R1E2() | {} }
void R2E2(): {} { "-" E3() | {} }
void E3(): {} { E4() RE3() }
void RE3(): {} { <And> E3() | <Or> E4() | {} }
void E4(): {} { E5() RE4() }
void RE4(): {} { OP4() E5() RE4() | {} }
void E5(): {} { OP5() E5() | E6() }
void E6(): {} { E7() RE6() }
void RE6(): {} { OP6() RE6() | {} }
void E7(): {} { "("E0()")" | operando() }
void OP1(): {} { ">" | "<" | <MenorOIgualQue> | <MayorOIgualQue> | <Igual> | <Diferente> }
void OP4(): {} { "*" | "/" | "%" }
void OP5(): {} { "-" | <Not> }
void OP6(): {} { "["E0()"]" | acceso_registro() | <Puntero> }
void acceso_registro(): {} { <Acceso> <Identificador> }
void operando(): {} { <LiteralReal> | <LiteralEntero> | <LiteralTrue> | <LiteralFalse> | <LiteralString> | <Identificador> | <Null> }