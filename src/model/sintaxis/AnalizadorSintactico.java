
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package model.sintaxis;

import exceptions.SintaxisException;
import model.lexico.AnalizadorLexico;
import model.lexico.UnidadLexica;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ClaseLexica.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\005\000\002\010\004\000\002" +
    "\012\006\000\002\012\003\000\002\013\003\000\002\013" +
    "\004\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\015\006\000\002\016\005\000\002\016\003\000\002" +
    "\017\003\000\002\011\005\000\002\020\006\000\002\021" +
    "\003\000\002\021\002\000\002\022\005\000\002\022\003" +
    "\000\002\023\004\000\002\023\005\000\002\024\003\000" +
    "\002\024\002\000\002\025\005\000\002\025\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\027\004\000\002\030\005\000\002\030\007\000\002" +
    "\031\005\000\002\032\004\000\002\033\004\000\002\034" +
    "\003\000\002\035\004\000\002\036\004\000\002\037\007" +
    "\000\002\040\003\000\002\041\003\000\002\041\002\000" +
    "\002\042\005\000\002\042\003\000\002\043\005\000\002" +
    "\043\003\000\002\044\005\000\002\044\003\000\002\045" +
    "\005\000\002\045\005\000\002\045\003\000\002\046\005" +
    "\000\002\046\005\000\002\046\003\000\002\047\005\000" +
    "\002\047\003\000\002\050\004\000\002\050\003\000\002" +
    "\051\004\000\002\051\003\000\002\052\005\000\002\052" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\055\003\000\002\055\003\000\002\056\005\000\002\056" +
    "\004\000\002\056\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\040\006\001\002\000\004\002\232\001" +
    "\002\000\004\002\001\001\002\000\052\004\024\005\025" +
    "\006\013\007\015\010\023\040\ufffd\041\ufffd\046\ufffd\051" +
    "\021\052\ufffd\054\ufffd\055\011\056\ufffd\057\ufffd\060\ufffd" +
    "\061\ufffd\062\ufffd\063\014\064\ufffd\066\017\001\002\000" +
    "\006\035\ufff8\047\ufff8\001\002\000\006\035\ufff9\047\ufff9" +
    "\001\002\000\004\040\223\001\002\000\006\035\ufffb\047" +
    "\ufffb\001\002\000\010\010\uffef\042\uffef\065\uffef\001\002" +
    "\000\020\004\024\005\025\006\013\007\015\010\023\055" +
    "\011\066\017\001\002\000\010\010\uffee\042\uffee\065\uffee" +
    "\001\002\000\010\010\uffec\042\uffec\065\uffec\001\002\000" +
    "\020\004\024\005\025\006\013\007\015\010\023\055\011" +
    "\066\017\001\002\000\006\035\ufffa\047\ufffa\001\002\000" +
    "\004\010\203\001\002\000\030\040\006\041\uffde\046\046" +
    "\052\055\054\050\056\064\057\065\060\044\061\056\062" +
    "\066\064\047\001\002\000\010\010\uffed\042\uffed\065\uffed" +
    "\001\002\000\010\010\ufff1\042\ufff1\065\ufff1\001\002\000" +
    "\010\010\ufff0\042\ufff0\065\ufff0\001\002\000\006\035\037" +
    "\047\036\001\002\000\010\010\ufff3\042\ufff3\065\ufff3\001" +
    "\002\000\010\010\ufff4\042\ufff4\065\ufff4\001\002\000\006" +
    "\010\033\042\032\001\002\000\004\011\034\001\002\000" +
    "\012\035\ufff6\041\ufff6\044\ufff6\047\ufff6\001\002\000\004" +
    "\043\035\001\002\000\010\010\ufff5\042\ufff5\065\ufff5\001" +
    "\002\000\030\040\ufffe\041\ufffe\046\ufffe\052\ufffe\054\ufffe" +
    "\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\064\ufffe\001" +
    "\002\000\024\004\024\005\025\006\013\007\015\010\023" +
    "\051\021\055\011\063\014\066\017\001\002\000\006\035" +
    "\ufffc\047\ufffc\001\002\000\006\035\uffd2\041\uffd2\001\002" +
    "\000\006\035\uffd6\041\uffd6\001\002\000\006\035\200\041" +
    "\uffdf\001\002\000\026\010\106\011\105\012\103\013\112" +
    "\014\070\015\111\017\113\025\071\036\104\050\110\001" +
    "\002\000\006\035\uffd3\041\uffd3\001\002\000\026\010\106" +
    "\011\105\012\103\013\112\014\070\015\111\017\113\025" +
    "\071\036\104\050\110\001\002\000\004\010\166\001\002" +
    "\000\026\010\106\011\105\012\103\013\112\014\070\015" +
    "\111\017\113\025\071\036\104\050\110\001\002\000\006" +
    "\035\uffd9\041\uffd9\001\002\000\006\035\uffdc\041\uffdc\001" +
    "\002\000\006\035\uffdb\041\uffdb\001\002\000\006\035\uffc7" +
    "\041\uffc7\001\002\000\026\010\106\011\105\012\103\013" +
    "\112\014\070\015\111\017\113\025\071\036\104\050\110" +
    "\001\002\000\026\010\106\011\105\012\103\013\112\014" +
    "\070\015\111\017\113\025\071\036\104\050\110\001\002" +
    "\000\006\035\uffd7\041\uffd7\001\002\000\006\035\uffd5\041" +
    "\uffd5\001\002\000\006\035\uffda\041\uffda\001\002\000\004" +
    "\041\156\001\002\000\006\035\uffd4\041\uffd4\001\002\000" +
    "\026\010\106\011\105\012\103\013\112\014\070\015\111" +
    "\017\113\025\071\036\104\050\110\001\002\000\026\010" +
    "\106\011\105\012\103\013\112\014\070\015\111\017\113" +
    "\025\071\036\104\050\110\001\002\000\006\035\uffcb\041" +
    "\uffcb\001\002\000\006\035\uffd8\041\uffd8\001\002\000\060" +
    "\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024" +
    "\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f" +
    "\034\uff9f\035\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043" +
    "\uff9f\044\uff9f\045\uff9f\066\uff9f\001\002\000\026\010\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\017\uffa6\025" +
    "\uffa6\036\uffa6\050\uffa6\001\002\000\060\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045" +
    "\uffb3\066\uffb3\001\002\000\060\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\150\043\uffb5\044\uffb5\045\146\066" +
    "\147\001\002\000\052\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\026\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\043\uffb7\044\uffb7\001\002\000\060\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\066\uffb1\001\002\000\052\016\uffb9\017\uffb9\020" +
    "\141\021\140\022\137\023\136\024\142\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\043\uffb9\044\uffb9\001\002\000\040" +
    "\016\uffbc\017\133\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\035\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\043\uffbc\044\uffbc\001\002\000\036\016\130\026\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\043\uffbf\044\uffbf\001\002\000" +
    "\034\026\123\027\124\030\125\031\126\032\121\033\122" +
    "\034\117\035\uffc1\037\uffc1\040\uffc1\041\uffc1\043\uffc1\044" +
    "\uffc1\001\002\000\006\035\uffc9\041\uffc9\001\002\000\060" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2" +
    "\034\uffa2\035\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\066\uffa2\001\002\000\026\010\106" +
    "\011\105\012\103\013\112\014\070\015\111\017\113\025" +
    "\071\036\104\050\110\001\002\000\060\016\uffa1\017\uffa1" +
    "\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\026\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1" +
    "\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045" +
    "\uffa1\066\uffa1\001\002\000\060\016\uff9d\017\uff9d\020\uff9d" +
    "\021\uff9d\022\uff9d\023\uff9d\024\uff9d\026\uff9d\027\uff9d\030" +
    "\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\037\uff9d" +
    "\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\066" +
    "\uff9d\001\002\000\026\010\106\011\105\012\103\013\112" +
    "\014\070\015\111\017\113\025\071\036\104\050\110\001" +
    "\002\000\060\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032" +
    "\uff9c\033\uff9c\034\uff9c\035\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\043\uff9c\044\uff9c\045\uff9c\066\uff9c\001\002\000" +
    "\060\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e" +
    "\024\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\066\uff9e\001\002\000\060\016" +
    "\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\066\uffa0\001\002\000\026\010\uffa7\011" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\017\uffa7\025\uffa7" +
    "\036\uffa7\050\uffa7\001\002\000\052\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\043\uffb6\044\uffb6\001\002\000\004" +
    "\037\116\001\002\000\060\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\037\uffb2\040" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\066\uffb2" +
    "\001\002\000\026\010\106\011\105\012\103\013\112\014" +
    "\070\015\111\017\113\025\071\036\104\050\110\001\002" +
    "\000\026\010\106\011\105\012\103\013\112\014\070\015" +
    "\111\017\113\025\071\036\104\050\110\001\002\000\026" +
    "\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\017" +
    "\uffac\025\uffac\036\uffac\050\uffac\001\002\000\026\010\uffab" +
    "\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\017\uffab\025" +
    "\uffab\036\uffab\050\uffab\001\002\000\026\010\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\014\uffaf\015\uffaf\017\uffaf\025\uffaf\036" +
    "\uffaf\050\uffaf\001\002\000\026\010\uffb0\011\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\017\uffb0\025\uffb0\036\uffb0\050" +
    "\uffb0\001\002\000\026\010\uffad\011\uffad\012\uffad\013\uffad" +
    "\014\uffad\015\uffad\017\uffad\025\uffad\036\uffad\050\uffad\001" +
    "\002\000\026\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\017\uffae\025\uffae\036\uffae\050\uffae\001\002\000" +
    "\036\016\130\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\037\uffc0\040\uffc0\041\uffc0\043" +
    "\uffc0\044\uffc0\001\002\000\026\010\106\011\105\012\103" +
    "\013\112\014\070\015\111\017\113\025\071\036\104\050" +
    "\110\001\002\000\036\016\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\043\uffbe\044\uffbe\001\002\000\016\035\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\043\uffc2\044\uffc2\001\002\000" +
    "\026\010\106\011\105\012\103\013\112\014\070\015\111" +
    "\017\113\025\071\036\104\050\110\001\002\000\036\016" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\037\uffbd\040\uffbd\041\uffbd\043\uffbd\044" +
    "\uffbd\001\002\000\026\010\106\011\105\012\103\013\112" +
    "\014\070\015\111\017\113\025\071\036\104\050\110\001" +
    "\002\000\026\010\106\011\105\012\103\013\112\014\070" +
    "\015\111\017\113\025\071\036\104\050\110\001\002\000" +
    "\026\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\017\uffa8\025\uffa8\036\uffa8\050\uffa8\001\002\000\026\010" +
    "\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\017\uffa9" +
    "\025\uffa9\036\uffa9\050\uffa9\001\002\000\026\010\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\017\uffaa\025\uffaa" +
    "\036\uffaa\050\uffaa\001\002\000\026\010\106\011\105\012" +
    "\103\013\112\014\070\015\111\017\113\025\071\036\104" +
    "\050\110\001\002\000\046\016\uffba\017\uffba\020\141\021" +
    "\140\022\137\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\035\uffba\037\uffba\040\uffba\041\uffba\043" +
    "\uffba\044\uffba\001\002\000\040\016\uffbb\017\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\043\uffbb\044\uffbb\001\002" +
    "\000\052\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\037\uffb8\040\uffb8\041\uffb8\043" +
    "\uffb8\044\uffb8\001\002\000\004\010\154\001\002\000\060" +
    "\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\066\uffa3\001\002\000\026\010\106" +
    "\011\105\012\103\013\112\014\070\015\111\017\113\025" +
    "\071\036\104\050\110\001\002\000\060\016\uffb4\017\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\066\uffb4\001\002\000\004\043\153\001\002\000\060" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\066\uffa5\001\002\000\060\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4" +
    "\035\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\066\uffa4\001\002\000\006\035\uffca\041\uffca" +
    "\001\002\000\014\002\uffff\035\uffff\041\uffff\047\uffff\053" +
    "\uffff\001\002\000\006\035\uffcc\041\uffcc\001\002\000\004" +
    "\040\006\001\002\000\010\035\uffd0\041\uffd0\053\162\001" +
    "\002\000\004\040\006\001\002\000\006\035\uffcf\041\uffcf" +
    "\001\002\000\004\040\006\001\002\000\006\035\uffce\041" +
    "\uffce\001\002\000\004\036\167\001\002\000\030\010\106" +
    "\011\105\012\103\013\112\014\070\015\111\017\113\025" +
    "\071\036\104\037\uffc5\050\110\001\002\000\006\037\uffc6" +
    "\044\174\001\002\000\006\037\uffc3\044\uffc3\001\002\000" +
    "\004\037\173\001\002\000\006\035\uffc8\041\uffc8\001\002" +
    "\000\026\010\106\011\105\012\103\013\112\014\070\015" +
    "\111\017\113\025\071\036\104\050\110\001\002\000\006" +
    "\037\uffc4\044\uffc4\001\002\000\006\035\uffd1\041\uffd1\001" +
    "\002\000\006\035\uffcd\041\uffcd\001\002\000\026\040\006" +
    "\046\046\052\055\054\050\056\064\057\065\060\044\061" +
    "\056\062\066\064\047\001\002\000\006\035\uffdd\041\uffdd" +
    "\001\002\000\004\040\006\001\002\000\004\036\204\001" +
    "\002\000\022\004\024\005\025\006\013\007\015\010\023" +
    "\037\uffe4\055\011\066\017\001\002\000\010\010\215\042" +
    "\032\065\214\001\002\000\006\037\uffe2\044\uffe2\001\002" +
    "\000\004\037\213\001\002\000\006\037\uffe5\044\211\001" +
    "\002\000\020\004\024\005\025\006\013\007\015\010\023" +
    "\055\011\066\017\001\002\000\006\037\uffe3\044\uffe3\001" +
    "\002\000\004\040\uffe6\001\002\000\004\010\216\001\002" +
    "\000\006\037\uffe1\044\uffe1\001\002\000\006\037\uffe0\044" +
    "\uffe0\001\002\000\006\035\uffe7\047\uffe7\001\002\000\010" +
    "\010\ufff2\042\ufff2\065\ufff2\001\002\000\006\010\222\042" +
    "\032\001\002\000\006\035\ufff7\047\ufff7\001\002\000\020" +
    "\004\024\005\025\006\013\007\015\010\023\055\011\066" +
    "\017\001\002\000\006\041\uffe8\044\uffe8\001\002\000\006" +
    "\041\230\044\227\001\002\000\006\041\uffe9\044\uffe9\001" +
    "\002\000\020\004\024\005\025\006\013\007\015\010\023" +
    "\055\011\066\017\001\002\000\010\010\uffeb\042\uffeb\065" +
    "\uffeb\001\002\000\006\041\uffea\044\uffea\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\021\005\025\006\011" +
    "\007\017\010\007\011\006\012\030\013\027\014\026\015" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\220\013\027\014\026\015\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\217\014\026\015\015\001" +
    "\001\000\002\001\001\000\004\020\201\001\001\000\036" +
    "\003\053\024\061\025\042\026\051\027\052\030\060\031" +
    "\050\032\066\033\056\034\041\035\057\036\062\037\044" +
    "\040\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\037\007\017\010\007\011\006\012\030\013" +
    "\027\014\026\015\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\043" +
    "\176\044\100\045\077\046\076\047\075\050\073\051\072" +
    "\052\071\055\106\057\074\001\001\000\002\001\001\000" +
    "\026\043\175\044\100\045\077\046\076\047\075\050\073" +
    "\051\072\052\071\055\106\057\074\001\001\000\002\001" +
    "\001\000\026\043\163\044\100\045\077\046\076\047\075" +
    "\050\073\051\072\052\071\055\106\057\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\043\157\044\100\045\077\046\076\047" +
    "\075\050\073\051\072\052\071\055\106\057\074\001\001" +
    "\000\026\043\156\044\100\045\077\046\076\047\075\050" +
    "\073\051\072\052\071\055\106\057\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\043\154\044\100\045\077" +
    "\046\076\047\075\050\073\051\072\052\071\055\106\057" +
    "\074\001\001\000\026\043\101\044\100\045\077\046\076" +
    "\047\075\050\073\051\072\052\071\055\106\057\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\043\114\044\100\045\077\046\076\047\075\050\073\051" +
    "\072\052\071\055\106\057\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\050\113\051\072\052\071\055" +
    "\106\057\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\043\131\044\100" +
    "\045\077\046\076\047\075\050\073\051\072\052\071\055" +
    "\106\057\074\001\001\000\022\045\126\046\076\047\075" +
    "\050\073\051\072\052\071\055\106\057\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\046\130\047\075\050\073\051\072\052\071" +
    "\055\106\057\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\046\133\047\075\050\073\051\072\052\071" +
    "\055\106\057\074\001\001\000\002\001\001\000\014\050" +
    "\144\051\072\052\071\055\106\057\074\001\001\000\020" +
    "\046\143\047\075\050\073\051\072\052\071\055\106\057" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\047\142\050\073\051\072\052\071\055" +
    "\106\057\074\001\001\000\004\054\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\043\151\044\100\045\077\046\076\047\075" +
    "\050\073\051\072\052\071\055\106\057\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\160\001\001\000\002\001\001\000\004" +
    "\003\162\001\001\000\002\001\001\000\004\003\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\041\171" +
    "\042\167\043\170\044\100\045\077\046\076\047\075\050" +
    "\073\051\072\052\071\055\106\057\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\043\174\044\100\045\077\046\076\047\075" +
    "\050\073\051\072\052\071\055\106\057\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\053\026\200\027\052\030\060\031\050\032\066\033" +
    "\056\034\041\035\057\036\062\037\044\040\040\001\001" +
    "\000\002\001\001\000\004\003\216\001\001\000\002\001" +
    "\001\000\020\012\204\013\027\014\026\015\015\021\206" +
    "\022\207\023\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\204" +
    "\013\027\014\026\015\015\023\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\223\012\030" +
    "\013\027\014\026\015\015\016\224\017\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\223\012\030\013\027\014\026\015\015\017\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

   AnalizadorLexico alex = (AnalizadorLexico)getScanner();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

  return getScanner().next_token();

    }


   public void syntax_error(Symbol unidadLexica)  {
     throw new SintaxisException((UnidadLexica)unidadLexica);
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAVE_APERTURA declaraciones_opt instrucciones_opt LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("bloque",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones_opt ::= declaraciones CAMBIO_SEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= declaraciones PYC declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= dec_tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= dec_variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= dec_procedimiento 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_tipo ::= TYPE tipo0 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dec_tipo",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_variable ::= tipo0 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dec_variable",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo0 ::= tipo0 COR_APERTURA LITERAL_ENTERO COR_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo0",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo0 ::= tipo1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo0",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo1 ::= tipo2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo1",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo1 ::= PUNTERO tipo1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo1",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo2 ::= ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo2 ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo2 ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo2 ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo2 ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo2 ::= registro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo2",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // registro ::= STRUCT LLAVE_APERTURA campos LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("registro",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // campos ::= campos COMA campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("campos",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // campos ::= campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("campos",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // campo ::= dec_variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("campo",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // dec_procedimiento ::= PROC def_proc bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("dec_procedimiento",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // def_proc ::= IDENTIFICADOR PAP lista_parametros_opt PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("def_proc",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_parametros_opt ::= lista_parametros 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros_opt",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_parametros_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros_opt",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_parametros ::= lista_parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametro ::= tipo0 IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametro",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametro ::= tipo0 REFERENCIA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("parametro",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrucciones_opt ::= instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones_opt",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrucciones_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones_opt",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instrucciones ::= instrucciones PYC instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= instruccion_eval 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= instruccion_if 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= instruccion_while 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= instruccion_read 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= instruccion_write 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= instruccion_nl 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= instruccion_new 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= instruccion_delete 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= instruccion_call 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= instruccion_compuesta 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion_eval ::= EVALUA E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion_eval",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccion_if ::= IF E0 bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion_if",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccion_if ::= IF E0 bloque ELSE bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion_if",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccion_while ::= WHILE E0 bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion_while",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruccion_read ::= READ E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion_read",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruccion_write ::= WRITE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion_write",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruccion_nl ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion_nl",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruccion_new ::= NEW E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion_new",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instruccion_delete ::= DELETE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion_delete",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instruccion_call ::= CALL IDENTIFICADOR PAP lista_expresiones_opt PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion_call",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instruccion_compuesta ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instruccion_compuesta",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_expresiones_opt ::= lista_expresiones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_expresiones_opt",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_expresiones_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_expresiones_opt",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_expresiones ::= lista_expresiones COMA E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_expresiones",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_expresiones ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_expresiones",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E0 ::= E1 ASIGNACION E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E0",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E1 ::= E1 OP1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E1",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E2 ::= E2 SUMA E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E2 ::= E3 RESTA E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E3 ::= E4 AND E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E3 ::= E4 OR E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E3",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E4 ::= E4 OP4 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E4",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E5 ::= OP5 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E5",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E6 ::= E6 OP6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E6",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E6",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E7 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E7",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E7 ::= operando 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E7",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP1 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP1 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP1 ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP1 ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP1 ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP1 ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP1",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP4 ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP4",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP4 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP4",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP4 ::= MODULO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP4",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP5 ::= RESTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP5",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP5 ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP5",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP6 ::= COR_APERTURA E0 COR_CIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP6",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP6 ::= ACCESO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP6",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP6 ::= PUNTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP6",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operando ::= LITERAL_REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operando",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operando ::= LITERAL_ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operando",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operando ::= LITERAL_TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operando",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operando ::= LITERAL_FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operando",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operando ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operando",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operando ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operando",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operando ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operando",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
