/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTinyConstants.java */
package model.sintaxis;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalizadorSintacticoTinyConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int Letra = 1;
  /** RegularExpression Id. */
  int DigitoPositivo = 2;
  /** RegularExpression Id. */
  int Digito = 3;
  /** RegularExpression Id. */
  int ParteEntera = 4;
  /** RegularExpression Id. */
  int ParteDecimal = 5;
  /** RegularExpression Id. */
  int ParteExponencial = 6;
  /** RegularExpression Id. */
  int ComboPartes = 7;
  /** RegularExpression Id. */
  int Entero = 8;
  /** RegularExpression Id. */
  int Real = 9;
  /** RegularExpression Id. */
  int Boolean = 10;
  /** RegularExpression Id. */
  int String = 11;
  /** RegularExpression Id. */
  int Puntero = 12;
  /** RegularExpression Id. */
  int Referencia = 13;
  /** RegularExpression Id. */
  int LiteralEntero = 14;
  /** RegularExpression Id. */
  int LiteralReal = 15;
  /** RegularExpression Id. */
  int LiteralTrue = 16;
  /** RegularExpression Id. */
  int LiteralFalse = 17;
  /** RegularExpression Id. */
  int LiteralString = 18;
  /** RegularExpression Id. */
  int Suma = 19;
  /** RegularExpression Id. */
  int Resta = 20;
  /** RegularExpression Id. */
  int Mul = 21;
  /** RegularExpression Id. */
  int Div = 22;
  /** RegularExpression Id. */
  int Modulo = 23;
  /** RegularExpression Id. */
  int And = 24;
  /** RegularExpression Id. */
  int Or = 25;
  /** RegularExpression Id. */
  int Not = 26;
  /** RegularExpression Id. */
  int MenorQue = 27;
  /** RegularExpression Id. */
  int MayorQue = 28;
  /** RegularExpression Id. */
  int MenorOIgualQue = 29;
  /** RegularExpression Id. */
  int MayorOIgualQue = 30;
  /** RegularExpression Id. */
  int Igual = 31;
  /** RegularExpression Id. */
  int Diferente = 32;
  /** RegularExpression Id. */
  int Asignacion = 33;
  /** RegularExpression Id. */
  int PyC = 34;
  /** RegularExpression Id. */
  int ParAp = 35;
  /** RegularExpression Id. */
  int ParCierre = 36;
  /** RegularExpression Id. */
  int CorcheteApertura = 37;
  /** RegularExpression Id. */
  int CorcheteCierro = 38;
  /** RegularExpression Id. */
  int LlaveApertura = 39;
  /** RegularExpression Id. */
  int LlaveCierre = 40;
  /** RegularExpression Id. */
  int Acceso = 41;
  /** RegularExpression Id. */
  int Coma = 42;
  /** RegularExpression Id. */
  int FinDeclaracion = 43;
  /** RegularExpression Id. */
  int Evalua = 44;
  /** RegularExpression Id. */
  int Null = 45;
  /** RegularExpression Id. */
  int Proc = 46;
  /** RegularExpression Id. */
  int If = 47;
  /** RegularExpression Id. */
  int Else = 48;
  /** RegularExpression Id. */
  int While = 49;
  /** RegularExpression Id. */
  int Struct = 50;
  /** RegularExpression Id. */
  int New = 51;
  /** RegularExpression Id. */
  int Delete = 52;
  /** RegularExpression Id. */
  int Read = 53;
  /** RegularExpression Id. */
  int Write = 54;
  /** RegularExpression Id. */
  int Nl = 55;
  /** RegularExpression Id. */
  int Type = 56;
  /** RegularExpression Id. */
  int Call = 57;
  /** RegularExpression Id. */
  int Identificador = 58;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<Letra>",
    "<DigitoPositivo>",
    "<Digito>",
    "<ParteEntera>",
    "<ParteDecimal>",
    "<ParteExponencial>",
    "<ComboPartes>",
    "<Entero>",
    "<Real>",
    "<Boolean>",
    "<String>",
    "\"^\"",
    "\"&\"",
    "<LiteralEntero>",
    "<LiteralReal>",
    "<LiteralTrue>",
    "<LiteralFalse>",
    "<LiteralString>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "<And>",
    "<Or>",
    "<Not>",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"=\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\".\"",
    "\",\"",
    "\"&&\"",
    "\"@\"",
    "<Null>",
    "<Proc>",
    "<If>",
    "<Else>",
    "<While>",
    "<Struct>",
    "<New>",
    "<Delete>",
    "<Read>",
    "<Write>",
    "<Nl>",
    "<Type>",
    "<Call>",
    "<Identificador>",
    "<token of kind 59>",
    "<token of kind 60>",
  };

}
