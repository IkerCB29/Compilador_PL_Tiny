/* ConstructorASTsCC.java */
/* Generated By:JavaCC: Do not edit this line. ConstructorASTsCC.java */
package model.sintaxis;

import model.sintaxis.SintaxisAbstracta.Prog;
import model.sintaxis.SintaxisAbstracta.Bloque;
import model.sintaxis.SintaxisAbstracta.Decs_opt;
import model.sintaxis.SintaxisAbstracta.Decs;
import model.sintaxis.SintaxisAbstracta.Dec;
import model.sintaxis.SintaxisAbstracta.Tipo;
import model.sintaxis.SintaxisAbstracta.Campos;
import model.sintaxis.SintaxisAbstracta.Campo;
import model.sintaxis.SintaxisAbstracta.LParam_opt;
import model.sintaxis.SintaxisAbstracta.LParam;
import model.sintaxis.SintaxisAbstracta.Param;
import model.sintaxis.SintaxisAbstracta.Instrs_opt;
import model.sintaxis.SintaxisAbstracta.Instrs;
import model.sintaxis.SintaxisAbstracta.Instr;
import model.sintaxis.SintaxisAbstracta.Exps_opt;
import model.sintaxis.SintaxisAbstracta.Exps;
import model.sintaxis.SintaxisAbstracta.Exp;
import model.lexico.UnidadLexica.StringLocalizado;

public class ConstructorASTsCC implements ConstructorASTsCCConstants {
  private ClaseSemantica sem = new ClaseSemantica();

  final public Prog analiza() throws ParseException {
    trace_call("analiza");
    try {
Prog prog;
      prog = programa();
      jj_consume_token(0);
{if ("" != null) return prog;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("analiza");
    }
}

  final public Prog programa() throws ParseException {
    trace_call("programa");
    try {
Bloque bq;
      bq = bloque();
{if ("" != null) return sem.prog(bq);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("programa");
    }
}

  final public Bloque bloque() throws ParseException {
    trace_call("bloque");
    try {
Decs_opt decs; Instrs_opt instrs;
      jj_consume_token(LlaveApertura);
      decs = declaraciones_opt();
      instrs = instrucciones_opt();
      jj_consume_token(LlaveCierre);
{if ("" != null) return sem.bloque(decs, instrs);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("bloque");
    }
}

  final public Decs_opt declaraciones_opt() throws ParseException {
    trace_call("declaraciones_opt");
    try {
Decs decs;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Entero:
      case Real:
      case Boolean:
      case String:
      case Proc:
      case Struct:
      case Type:
      case Identificador:
      case Puntero:{
        decs = declaraciones();
        jj_consume_token(FinDeclaracion);
{if ("" != null) return sem.si_decs(decs);}
        break;
        }
      default:
        jj_la1[0] = jj_gen;
{if ("" != null) return sem.no_decs();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaraciones_opt");
    }
}

  final public Decs declaraciones() throws ParseException {
    trace_call("declaraciones");
    try {
Decs decs; Dec dec;
      dec = declaracion();
      decs = r_declaraciones(sem.una_dec(dec));
{if ("" != null) return decs;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaraciones");
    }
}

  final public Decs r_declaraciones(Decs decsh) throws ParseException {
    trace_call("r_declaraciones");
    try {
Decs decs; Dec dec;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PyC:{
        jj_consume_token(PyC);
        dec = declaracion();
        decs = r_declaraciones(sem.l_decs(decsh, dec));
{if ("" != null) return decs;}
        break;
        }
      default:
        jj_la1[1] = jj_gen;
{if ("" != null) return decsh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("r_declaraciones");
    }
}

  final public Dec declaracion() throws ParseException {
    trace_call("declaracion");
    try {
Dec dec;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Entero:
      case Real:
      case Boolean:
      case String:
      case Struct:
      case Identificador:
      case Puntero:{
        dec = dec_variable();
{if ("" != null) return dec;}
        break;
        }
      case Type:{
        dec = dec_tipo();
{if ("" != null) return dec;}
        break;
        }
      case Proc:{
        dec = dec_procedimiento();
{if ("" != null) return dec;}
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaracion");
    }
}

  final public Dec dec_tipo() throws ParseException {
    trace_call("dec_tipo");
    try {
Tipo tipo; Token id;
      jj_consume_token(Type);
      tipo = tipo0();
      id = jj_consume_token(Identificador);
{if ("" != null) return (Dec)sem.t_dec(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("dec_tipo");
    }
}

  final public Dec dec_variable() throws ParseException {
    trace_call("dec_variable");
    try {
Tipo tipo; Token id;
      tipo = tipo0();
      id = jj_consume_token(Identificador);
{if ("" != null) return (Dec)sem.v_dec(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("dec_variable");
    }
}

  final public Tipo tipo0() throws ParseException {
    trace_call("tipo0");
    try {
Tipo tipo, rtipo;
      tipo = tipo1();
      rtipo = r_tipo0(tipo);
{if ("" != null) return rtipo;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo0");
    }
}

  final public Tipo r_tipo0(Tipo tipoh) throws ParseException {
    trace_call("r_tipo0");
    try {
Token cap; Tipo rtipo;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CorcheteApertura:{
        jj_consume_token(CorcheteApertura);
        cap = jj_consume_token(LiteralEntero);
        jj_consume_token(CorcheteCierro);
        rtipo = r_tipo0((Tipo)sem.a_tipo(tipoh, cap.image).ponFila(cap.beginLine).ponCol(cap.beginColumn));
{if ("" != null) return rtipo;}
        break;
        }
      default:
        jj_la1[3] = jj_gen;
{if ("" != null) return tipoh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("r_tipo0");
    }
}

  final public Tipo tipo1() throws ParseException {
    trace_call("tipo1");
    try {
Tipo tipo;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Puntero:{
        jj_consume_token(Puntero);
        tipo = tipo1();
{if ("" != null) return sem.p_tipo(tipo);}
        break;
        }
      case Entero:
      case Real:
      case Boolean:
      case String:
      case Struct:
      case Identificador:{
        tipo = tipo2();
{if ("" != null) return tipo;}
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo1");
    }
}

  final public Tipo tipo2() throws ParseException {
    trace_call("tipo2");
    try {
Tipo tipo; Token id;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Entero:{
        jj_consume_token(Entero);
{if ("" != null) return sem.in_tipo();}
        break;
        }
      case Real:{
        jj_consume_token(Real);
{if ("" != null) return sem.r_tipo();}
        break;
        }
      case Boolean:{
        jj_consume_token(Boolean);
{if ("" != null) return sem.b_tipo();}
        break;
        }
      case String:{
        jj_consume_token(String);
{if ("" != null) return sem.string_tipo();}
        break;
        }
      case Identificador:{
        id = jj_consume_token(Identificador);
{if ("" != null) return (Tipo)sem.id_tipo(id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        }
      case Struct:{
        tipo = registro();
{if ("" != null) return tipo;}
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("tipo2");
    }
}

  final public Tipo registro() throws ParseException {
    trace_call("registro");
    try {
Campos campos;
      jj_consume_token(Struct);
      jj_consume_token(LlaveApertura);
      campos = campos();
      jj_consume_token(LlaveCierre);
{if ("" != null) return sem.struct_tipo(campos);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("registro");
    }
}

  final public Campos campos() throws ParseException {
    trace_call("campos");
    try {
Campos campos; Campo campo;
      campo = campo();
      campos = r_campos(sem.un_campo(campo));
{if ("" != null) return campos;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("campos");
    }
}

  final public Campos r_campos(Campos camposh) throws ParseException {
    trace_call("r_campos");
    try {
Campos campos; Campo campo;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Coma:{
        jj_consume_token(Coma);
        campo = campo();
        campos = r_campos(sem.l_campos(camposh, campo));
{if ("" != null) return campos;}
        break;
        }
      default:
        jj_la1[6] = jj_gen;
{if ("" != null) return camposh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("r_campos");
    }
}

  final public Campo campo() throws ParseException {
    trace_call("campo");
    try {
Tipo tipo; Token id;
      tipo = tipo0();
      id = jj_consume_token(Identificador);
{if ("" != null) return (Campo)sem.camp(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("campo");
    }
}

  final public Dec dec_procedimiento() throws ParseException {
    trace_call("dec_procedimiento");
    try {
Token id; LParam_opt lParam; Bloque bq;
      jj_consume_token(Proc);
      id = jj_consume_token(Identificador);
      jj_consume_token(ParAp);
      lParam = lista_parametros_opt();
      jj_consume_token(ParCierre);
      bq = bloque();
{if ("" != null) return (Dec)sem.p_dec(id.image, lParam, bq).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("dec_procedimiento");
    }
}

  final public LParam_opt lista_parametros_opt() throws ParseException {
    trace_call("lista_parametros_opt");
    try {
LParam lParam;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Entero:
      case Real:
      case Boolean:
      case String:
      case Struct:
      case Identificador:
      case Puntero:{
        lParam = lista_parametros();
{if ("" != null) return sem.si_param(lParam);}
        break;
        }
      default:
        jj_la1[7] = jj_gen;
{if ("" != null) return sem.no_param();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_parametros_opt");
    }
}

  final public LParam lista_parametros() throws ParseException {
    trace_call("lista_parametros");
    try {
LParam lParam; Param param;
      param = parametro();
      lParam = r_lista_parametros(sem.un_param(param));
{if ("" != null) return lParam;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_parametros");
    }
}

  final public LParam r_lista_parametros(LParam lParamh) throws ParseException {
    trace_call("r_lista_parametros");
    try {
LParam lParam; Param param;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Coma:{
        jj_consume_token(Coma);
        param = parametro();
        lParam = r_lista_parametros(sem.l_param(lParamh, param));
{if ("" != null) return lParam;}
        break;
        }
      default:
        jj_la1[8] = jj_gen;
{if ("" != null) return lParamh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("r_lista_parametros");
    }
}

  final public Param parametro() throws ParseException {
    trace_call("parametro");
    try {
Tipo tipo; Param param;
      tipo = tipo0();
      param = r_parametro(tipo);
{if ("" != null) return param;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parametro");
    }
}

  final public Param r_parametro(Tipo tipo) throws ParseException {
    trace_call("r_parametro");
    try {
Token id;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Identificador:{
        id = jj_consume_token(Identificador);
{if ("" != null) return (Param)sem.param_simple(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        }
      case Referencia:{
        jj_consume_token(Referencia);
        id = jj_consume_token(Identificador);
{if ("" != null) return (Param)sem.param_ref(tipo, id.image).ponFila(id.beginLine).ponCol(id.beginColumn);}
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("r_parametro");
    }
}

  final public Instrs_opt instrucciones_opt() throws ParseException {
    trace_call("instrucciones_opt");
    try {
Instrs instrs;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case If:
      case While:
      case New:
      case Delete:
      case Read:
      case Write:
      case Nl:
      case Call:
      case LlaveApertura:
      case Evalua:{
        instrs = instrucciones();
{if ("" != null) return sem.si_instrs(instrs);}
        break;
        }
      default:
        jj_la1[10] = jj_gen;
{if ("" != null) return sem.no_instrs();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instrucciones_opt");
    }
}

  final public Instrs instrucciones() throws ParseException {
    trace_call("instrucciones");
    try {
Instrs instrs; Instr instr;
      instr = instruccion();
      instrs = r_instrucciones(sem.una_instr(instr));
{if ("" != null) return instrs;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instrucciones");
    }
}

  final public Instrs r_instrucciones(Instrs instrsh) throws ParseException {
    trace_call("r_instrucciones");
    try {
Instrs instrs; Instr instr;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PyC:{
        jj_consume_token(PyC);
        instr = instruccion();
        instrs = r_instrucciones(sem.l_instrs(instrsh, instr));
{if ("" != null) return instrs;}
        break;
        }
      default:
        jj_la1[11] = jj_gen;
{if ("" != null) return instrsh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("r_instrucciones");
    }
}

  final public Instr instruccion() throws ParseException {
    trace_call("instruccion");
    try {
Instr instr;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Evalua:{
        instr = instruccion_eval();
{if ("" != null) return instr;}
        break;
        }
      case If:{
        instr = instruccion_if();
{if ("" != null) return instr;}
        break;
        }
      case While:{
        instr = instruccion_while();
{if ("" != null) return instr;}
        break;
        }
      case Read:{
        instr = instruccion_read();
{if ("" != null) return instr;}
        break;
        }
      case Write:{
        instr = instruccion_write();
{if ("" != null) return instr;}
        break;
        }
      case Nl:{
        instr = instruccion_nl();
{if ("" != null) return instr;}
        break;
        }
      case New:{
        instr = instruccion_new();
{if ("" != null) return instr;}
        break;
        }
      case Delete:{
        instr = instruccion_delete();
{if ("" != null) return instr;}
        break;
        }
      case Call:{
        instr = instruccion_call();
{if ("" != null) return instr;}
        break;
        }
      case LlaveApertura:{
        instr = instruccion_compuesta();
{if ("" != null) return instr;}
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion");
    }
}

  final public Instr instruccion_eval() throws ParseException {
    trace_call("instruccion_eval");
    try {
Exp exp;
      jj_consume_token(Evalua);
      exp = E0();
{if ("" != null) return sem.eva(exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_eval");
    }
}

  final public Instr instruccion_if() throws ParseException {
    trace_call("instruccion_if");
    try {
Exp exp; Bloque bq; Instr instr;
      jj_consume_token(If);
      exp = E0();
      bq = bloque();
      instr = r_instruccion_if(exp, bq);
{if ("" != null) return instr;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_if");
    }
}

  final public Instr r_instruccion_if(Exp exp, Bloque bq1) throws ParseException {
    trace_call("r_instruccion_if");
    try {
Bloque bq2;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Else:{
        jj_consume_token(Else);
        bq2 = bloque();
{if ("" != null) return sem.if_el(exp, bq1, bq2);}
        break;
        }
      default:
        jj_la1[13] = jj_gen;
{if ("" != null) return sem.if_instr(exp, bq1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("r_instruccion_if");
    }
}

  final public Instr instruccion_while() throws ParseException {
    trace_call("instruccion_while");
    try {
Exp exp; Bloque bq;
      jj_consume_token(While);
      exp = E0();
      bq = bloque();
{if ("" != null) return sem.wh(exp, bq);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_while");
    }
}

  final public Instr instruccion_read() throws ParseException {
    trace_call("instruccion_read");
    try {
Exp exp;
      jj_consume_token(Read);
      exp = E0();
{if ("" != null) return sem.rd(exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_read");
    }
}

  final public Instr instruccion_write() throws ParseException {
    trace_call("instruccion_write");
    try {
Exp exp;
      jj_consume_token(Write);
      exp = E0();
{if ("" != null) return sem.wr(exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_write");
    }
}

  final public Instr instruccion_nl() throws ParseException {
    trace_call("instruccion_nl");
    try {

      jj_consume_token(Nl);
{if ("" != null) return sem.nl();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_nl");
    }
}

  final public Instr instruccion_new() throws ParseException {
    trace_call("instruccion_new");
    try {
Exp exp;
      jj_consume_token(New);
      exp = E0();
{if ("" != null) return sem.nw(exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_new");
    }
}

  final public Instr instruccion_delete() throws ParseException {
    trace_call("instruccion_delete");
    try {
Exp exp;
      jj_consume_token(Delete);
      exp = E0();
{if ("" != null) return sem.dl(exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_delete");
    }
}

  final public Instr instruccion_call() throws ParseException {
    trace_call("instruccion_call");
    try {
Token id; Exps_opt exps;
      jj_consume_token(Call);
      id = jj_consume_token(Identificador);
      jj_consume_token(ParAp);
      exps = lista_expresiones_opt();
      jj_consume_token(ParCierre);
{if ("" != null) return (Instr)sem.cl(id.image, exps).ponFila(id.beginLine).ponCol(id.beginColumn);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_call");
    }
}

  final public Instr instruccion_compuesta() throws ParseException {
    trace_call("instruccion_compuesta");
    try {
Bloque bq;
      bq = bloque();
{if ("" != null) return sem.bq_instr(bq);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instruccion_compuesta");
    }
}

  final public Exps_opt lista_expresiones_opt() throws ParseException {
    trace_call("lista_expresiones_opt");
    try {
Exps exps;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LiteralTrue:
      case LiteralFalse:
      case Not:
      case Null:
      case Identificador:
      case LiteralEntero:
      case LiteralReal:
      case LiteralString:
      case ParAp:
      case 51:{
        exps = lista_expresiones();
{if ("" != null) return sem.si_exps(exps);}
        break;
        }
      default:
        jj_la1[14] = jj_gen;
{if ("" != null) return sem.no_exps();}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_expresiones_opt");
    }
}

  final public Exps lista_expresiones() throws ParseException {
    trace_call("lista_expresiones");
    try {
Exps exps; Exp exp;
      exp = E0();
      exps = r_lista_expresiones(sem.una_exp(exp));
{if ("" != null) return exps;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lista_expresiones");
    }
}

  final public Exps r_lista_expresiones(Exps expsh) throws ParseException {
    trace_call("r_lista_expresiones");
    try {
Exps exps; Exp exp;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Coma:{
        jj_consume_token(Coma);
        exp = E0();
        exps = r_lista_expresiones(sem.l_exps(expsh, exp));
{if ("" != null) return exps;}
        break;
        }
      default:
        jj_la1[15] = jj_gen;
{if ("" != null) return expsh;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("r_lista_expresiones");
    }
}

  final public Exp E0() throws ParseException {
    trace_call("E0");
    try {
Exp exp; Exp rexp;
      exp = E1();
      rexp = RE0(exp);
{if ("" != null) return rexp;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E0");
    }
}

  final public Exp RE0(Exp exph) throws ParseException {
    trace_call("RE0");
    try {
Token op; Exp exp;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:{
        op = jj_consume_token(49);
        exp = E0();
{if ("" != null) return (Exp)sem.mkop("=", exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
        }
      default:
        jj_la1[16] = jj_gen;
{if ("" != null) return exph;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RE0");
    }
}

  final public Exp E1() throws ParseException {
    trace_call("E1");
    try {
Exp exp, rexp;
      exp = E2();
      rexp = RE1(exp);
{if ("" != null) return rexp;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E1");
    }
}

  final public Exp RE1(Exp exph) throws ParseException {
    trace_call("RE1");
    try {
Token op; Exp exp, rexp;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:{
        op = OP1();
        exp = E2();
        rexp = RE1((Exp)sem.mkop(op.image, exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn));
{if ("" != null) return rexp;}
        break;
        }
      default:
        jj_la1[17] = jj_gen;
{if ("" != null) return exph;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RE1");
    }
}

  final public Exp E2() throws ParseException {
    trace_call("E2");
    try {
Exp exp, rexp1, rexp2;
      exp = E3();
      rexp2 = R2E2(exp);
      rexp1 = R1E2(rexp2);
{if ("" != null) return rexp1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E2");
    }
}

  final public Exp R1E2(Exp exph) throws ParseException {
    trace_call("R1E2");
    try {
Token op; Exp exp, rexp;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 50:{
        op = jj_consume_token(50);
        exp = E3();
        rexp = R1E2((Exp)sem.mkop("+", exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn));
{if ("" != null) return rexp;}
        break;
        }
      default:
        jj_la1[18] = jj_gen;
{if ("" != null) return exph;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("R1E2");
    }
}

  final public Exp R2E2(Exp exph) throws ParseException {
    trace_call("R2E2");
    try {
Token op; Exp exp;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 51:{
        op = jj_consume_token(51);
        exp = E3();
{if ("" != null) return (Exp)sem.mkop("-", exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
        }
      default:
        jj_la1[19] = jj_gen;
{if ("" != null) return exph;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("R2E2");
    }
}

  final public Exp E3() throws ParseException {
    trace_call("E3");
    try {
Exp exp, rexp;
      exp = E4();
      rexp = RE3(exp);
{if ("" != null) return rexp;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E3");
    }
}

  final public Exp RE3(Exp exph) throws ParseException {
    trace_call("RE3");
    try {
Token op; Exp exp;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case And:{
        op = jj_consume_token(And);
        exp = E3();
{if ("" != null) return (Exp)sem.mkop("and", exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
        }
      case Or:{
        op = jj_consume_token(Or);
        exp = E4();
{if ("" != null) return (Exp)sem.mkop("or", exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
        }
      default:
        jj_la1[20] = jj_gen;
{if ("" != null) return exph;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RE3");
    }
}

  final public Exp E4() throws ParseException {
    trace_call("E4");
    try {
Exp exp, rexp;
      exp = E5();
      rexp = RE4(exp);
{if ("" != null) return rexp;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E4");
    }
}

  final public Exp RE4(Exp exph) throws ParseException {
    trace_call("RE4");
    try {
Token op; Exp exp, rexp;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 58:
      case 59:
      case 60:{
        op = OP4();
        exp = E5();
        rexp = RE4((Exp)sem.mkop(op.image, exph, exp).ponFila(op.beginLine).ponCol(op.beginColumn));
{if ("" != null) return rexp;}
        break;
        }
      default:
        jj_la1[21] = jj_gen;
{if ("" != null) return exph;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RE4");
    }
}

  final public Exp E5() throws ParseException {
    trace_call("E5");
    try {
Token op; Exp exp;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 51:{
        op = jj_consume_token(51);
        exp = E5();
{if ("" != null) return (Exp)sem.mkop_pre("-", exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
        }
      case Not:{
        op = jj_consume_token(Not);
        exp = E5();
{if ("" != null) return (Exp)sem.mkop_pre("not", exp).ponFila(op.beginLine).ponCol(op.beginColumn);}
        break;
        }
      case LiteralTrue:
      case LiteralFalse:
      case Null:
      case Identificador:
      case LiteralEntero:
      case LiteralReal:
      case LiteralString:
      case ParAp:{
        exp = E6();
{if ("" != null) return exp;}
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E5");
    }
}

  final public Exp E6() throws ParseException {
    trace_call("E6");
    try {
Exp exp, rexp;
      exp = E7();
      rexp = RE6(exp);
{if ("" != null) return rexp;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E6");
    }
}

  final public Exp RE6(Exp exph) throws ParseException {
    trace_call("RE6");
    try {
Token aper, acc, puntero; Exp exp, rexp;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CorcheteApertura:{
        aper = jj_consume_token(CorcheteApertura);
        exp = E0();
        jj_consume_token(CorcheteCierro);
        rexp = RE6((Exp)sem.indexacion(exph, exp).ponFila(aper.beginLine).ponCol(aper.beginColumn));
{if ("" != null) return rexp;}
        break;
        }
      case Acceso:{
        jj_consume_token(Acceso);
        acc = jj_consume_token(Identificador);
        rexp = RE6((Exp)sem.acceso(exph, acc.image).ponFila(acc.beginLine).ponCol(acc.beginColumn));
{if ("" != null) return rexp;}
        break;
        }
      case Puntero:{
        puntero = jj_consume_token(Puntero);
        rexp = RE6((Exp)sem.indireccion(exph).ponFila(puntero.beginLine).ponCol(puntero.beginColumn));
{if ("" != null) return rexp;}
        break;
        }
      default:
        jj_la1[23] = jj_gen;
{if ("" != null) return exph;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RE6");
    }
}

  final public Exp E7() throws ParseException {
    trace_call("E7");
    try {
Exp exp;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ParAp:{
        jj_consume_token(ParAp);
        exp = E0();
        jj_consume_token(ParCierre);
{if ("" != null) return exp;}
        break;
        }
      case LiteralTrue:
      case LiteralFalse:
      case Null:
      case Identificador:
      case LiteralEntero:
      case LiteralReal:
      case LiteralString:{
        exp = operando();
{if ("" != null) return exp;}
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("E7");
    }
}

  final public Token OP1() throws ParseException {
    trace_call("OP1");
    try {
Token op;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 52:{
        op = jj_consume_token(52);
{if ("" != null) return op;}
        break;
        }
      case 53:{
        op = jj_consume_token(53);
{if ("" != null) return op;}
        break;
        }
      case 54:{
        op = jj_consume_token(54);
{if ("" != null) return op;}
        break;
        }
      case 55:{
        op = jj_consume_token(55);
{if ("" != null) return op;}
        break;
        }
      case 56:{
        op = jj_consume_token(56);
{if ("" != null) return op;}
        break;
        }
      case 57:{
        op = jj_consume_token(57);
{if ("" != null) return op;}
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("OP1");
    }
}

  final public Token OP4() throws ParseException {
    trace_call("OP4");
    try {
Token op;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 58:{
        op = jj_consume_token(58);
{if ("" != null) return op;}
        break;
        }
      case 59:{
        op = jj_consume_token(59);
{if ("" != null) return op;}
        break;
        }
      case 60:{
        op = jj_consume_token(60);
{if ("" != null) return op;}
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("OP4");
    }
}

  final public Exp operando() throws ParseException {
    trace_call("operando");
    try {
Token opnd;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LiteralReal:{
        opnd = jj_consume_token(LiteralReal);
{if ("" != null) return (Exp)sem.real(opnd.image).ponFila(opnd.beginLine).ponCol(opnd.beginColumn);}
        break;
        }
      case LiteralEntero:{
        opnd = jj_consume_token(LiteralEntero);
{if ("" != null) return (Exp)sem.entero(opnd.image).ponFila(opnd.beginLine).ponCol(opnd.beginColumn);}
        break;
        }
      case LiteralTrue:{
        opnd = jj_consume_token(LiteralTrue);
{if ("" != null) return (Exp)sem.true_exp().ponFila(opnd.beginLine).ponCol(opnd.beginColumn);}
        break;
        }
      case LiteralFalse:{
        opnd = jj_consume_token(LiteralFalse);
{if ("" != null) return (Exp)sem.false_exp().ponFila(opnd.beginLine).ponCol(opnd.beginColumn);}
        break;
        }
      case LiteralString:{
        opnd = jj_consume_token(LiteralString);
{if ("" != null) return (Exp)sem.string(opnd.image).ponFila(opnd.beginLine).ponCol(opnd.beginColumn);}
        break;
        }
      case Identificador:{
        opnd = jj_consume_token(Identificador);
{if ("" != null) return (Exp)sem.iden(opnd.image).ponFila(opnd.beginLine).ponCol(opnd.beginColumn);}
        break;
        }
      case Null:{
        opnd = jj_consume_token(Null);
{if ("" != null) return (Exp)sem.nulo().ponFila(opnd.beginLine).ponCol(opnd.beginColumn);}
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("operando");
    }
}

  /** Generated Token Manager. */
  public ConstructorASTsCCTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x50440f00,0x0,0x50440f00,0x0,0x40400f00,0x40400f00,0x0,0x40400f00,0x0,0x40000000,0x2fa80000,0x0,0x2fa80000,0x100000,0xc0033000,0x0,0x0,0x0,0x0,0x0,0xc000,0x0,0xc0033000,0x0,0xc0023000,0x0,0x0,0xc0023000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x8,0x20,0x8,0x100,0x8,0x0,0x1000,0x8,0x1000,0x10,0x4400,0x20,0x4400,0x0,0x80043,0x1000,0x20000,0x3f00000,0x40000,0x80000,0x0,0x1c000000,0x80043,0x10c,0x43,0x3f00000,0x1c000000,0x3,};
	}

  {
      enable_tracing();
  }
  /** Constructor with InputStream. */
  public ConstructorASTsCC(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ConstructorASTsCC(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ConstructorASTsCCTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ConstructorASTsCC(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ConstructorASTsCCTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ConstructorASTsCCTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ConstructorASTsCC(ConstructorASTsCCTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ConstructorASTsCCTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   trace_token(token, "");
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	   trace_token(token, " (in getNextToken)");
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[61];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 28; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 61; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  private int trace_indent = 0;
/** Enable tracing. */
  final public void enable_tracing() {
	 trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
	 trace_enabled = false;
  }

  protected void trace_call(String s) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Call:	" + s);
	 }
	 trace_indent = trace_indent + 2;
  }

  protected void trace_return(String s) {
	 trace_indent = trace_indent - 2;
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.println("Return: " + s);
	 }
  }

  protected void trace_token(Token t, String where) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Consumed token: <" + tokenImage[t.kind]);
	   if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t.image) + "\"");
	   }
	   System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
	 }
  }

  protected void trace_scan(Token t1, int t2) {
	 if (trace_enabled) {
	   for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
	   System.out.print("Visited token: <" + tokenImage[t1.kind]);
	   if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
		 System.out.print(": \"" + TokenMgrError.addEscapes(t1.image) + "\"");
	   }
	   System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
	 }
  }

}
